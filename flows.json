[
    {
        "id": "6c71644f.90490c",
        "type": "tab",
        "label": "motion notifications",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8e4e09de.5dedc8",
        "type": "tab",
        "label": "skyaware",
        "disabled": false,
        "info": ""
    },
    {
        "id": "efaed6095d445392",
        "type": "tab",
        "label": "voron v0",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6f1ebe1822580f11",
        "type": "tab",
        "label": "vcore3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6262a64468718f73",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "429b7a553657396c",
        "type": "tab",
        "label": "monitoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b34df73523bd7dfb",
        "type": "tab",
        "label": "UniFi Protect",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8ee3d653bff5e3e5",
        "type": "subflow",
        "name": "printer notifications",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "e9bf244afc398f1b"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "notif_id",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "ID"
                    }
                }
            },
            {
                "name": "notif_title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "title"
                    }
                }
            },
            {
                "name": "notif_message",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "message"
                    }
                }
            },
            {
                "name": "camera_id",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-video-camera"
                }
            },
            {
                "name": "moon_fullModel",
                "type": "json",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-moon-o",
                    "label": {
                        "en-US": "full model"
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "914734122ce79fcd",
        "type": "subflow",
        "name": "iOS Actionable Notification",
        "info": "[Documentation](https://github.com/zachowj/node-red-contrib-home-assistant-websocket/discussions/379)\n",
        "category": "home_assistant",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "f8d958779acdc007"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1440,
                "y": 160,
                "wires": [
                    {
                        "id": "7bb055c340123ca6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1440,
                "y": 200,
                "wires": [
                    {
                        "id": "7bb055c340123ca6",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1440,
                "y": 240,
                "wires": [
                    {
                        "id": "7bb055c340123ca6",
                        "port": 2
                    }
                ]
            },
            {
                "x": 1440,
                "y": 280,
                "wires": [
                    {
                        "id": "7bb055c340123ca6",
                        "port": 3
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "group",
                "type": "str",
                "value": "None",
                "ui": {
                    "label": {
                        "en-US": "Group Name"
                    }
                }
            },
            {
                "name": "tag",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Tag (for replacing messages - optional)"
                    }
                }
            },
            {
                "name": "service",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Notify Service"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "subtitle",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Subtitle (optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "message",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Message"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "notificationUrl",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Notification URL (optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "customSoundPreInstalled",
                "type": "str",
                "value": "default",
                "ui": {
                    "label": {
                        "en-US": "Pre-installed Custom Sound"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "default"
                                },
                                "v": "default"
                            },
                            {
                                "l": {
                                    "en-US": "No Sound"
                                },
                                "v": "none"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Back-Door-Opened.wav"
                                },
                                "v": "US-EN-Alexa-Back-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Back-Door-Unlocked.wav"
                                },
                                "v": "US-EN-Alexa-Back-Door-Unlocked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Basement-Door-Opened.wav"
                                },
                                "v": "US-EN-Alexa-Basement-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Basement-Door-Unlocked.wav"
                                },
                                "v": "US-EN-Alexa-Basement-Door-Unlocked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Boyfriend-Is-Arriving.wav"
                                },
                                "v": "US-EN-Alexa-Boyfriend-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Daughter-Is-Arriving.wav"
                                },
                                "v": "US-EN-Alexa-Daughter-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Front-Door-Opened.wav"
                                },
                                "v": "US-EN-Alexa-Front-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Front-Door-Unlocked.wav"
                                },
                                "v": "US-EN-Alexa-Front-Door-Unlocked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Garage-Door-Opened.wav"
                                },
                                "v": "US-EN-Alexa-Garage-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Girlfriend-Is-Arriving.wav"
                                },
                                "v": "US-EN-Alexa-Girlfriend-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Good-Morning.wav"
                                },
                                "v": "US-EN-Alexa-Good-Morning.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Good-Night.wav"
                                },
                                "v": "US-EN-Alexa-Good-Night.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Husband-Is-Arriving.wav"
                                },
                                "v": "US-EN-Alexa-Husband-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Mail-Has-Arrived.wav"
                                },
                                "v": "US-EN-Alexa-Mail-Has-Arrived.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Motion-At-Back-Door.wav"
                                },
                                "v": "US-EN-Alexa-Motion-At-Back-Door.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Motion-At-Front-Door.wav"
                                },
                                "v": "US-EN-Alexa-Motion-At-Front-Door.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Motion-Detected-Generic.wav"
                                },
                                "v": "US-EN-Alexa-Motion-Detected-Generic.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Motion-In-Back-Yard.wav"
                                },
                                "v": "US-EN-Alexa-Motion-In-Back-Yard.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Motion-In-Basement.wav"
                                },
                                "v": "US-EN-Alexa-Motion-In-Basement.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Motion-In-Front-Yard.wav"
                                },
                                "v": "US-EN-Alexa-Motion-In-Front-Yard.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Motion-In-Garage.wav"
                                },
                                "v": "US-EN-Alexa-Motion-In-Garage.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Patio-Door-Opened.wav"
                                },
                                "v": "US-EN-Alexa-Patio-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Patio-Door-Unlocked.wav"
                                },
                                "v": "US-EN-Alexa-Patio-Door-Unlocked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Smoke-Detected-Generic.wav"
                                },
                                "v": "US-EN-Alexa-Smoke-Detected-Generic.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Smoke-Detected-In-Basement.wav"
                                },
                                "v": "US-EN-Alexa-Smoke-Detected-In-Basement.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Smoke-Detected-In-Garage.wav"
                                },
                                "v": "US-EN-Alexa-Smoke-Detected-In-Garage.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Smoke-Detected-In-Kitchen.wav"
                                },
                                "v": "US-EN-Alexa-Smoke-Detected-In-Kitchen.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Son-Is-Arriving.wav"
                                },
                                "v": "US-EN-Alexa-Son-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Water-Detected-Generic.wav"
                                },
                                "v": "US-EN-Alexa-Water-Detected-Generic.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Water-Detected-In-Basement.wav"
                                },
                                "v": "US-EN-Alexa-Water-Detected-In-Basement.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Water-Detected-In-Garage.wav"
                                },
                                "v": "US-EN-Alexa-Water-Detected-In-Garage.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Water-Detected-In-Kitchen.wav"
                                },
                                "v": "US-EN-Alexa-Water-Detected-In-Kitchen.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Welcome-Home.wav"
                                },
                                "v": "US-EN-Alexa-Welcome-Home.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Alexa-Wife-Is-Arriving.wav"
                                },
                                "v": "US-EN-Alexa-Wife-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Back-Door-Motion.wav"
                                },
                                "v": "US-EN-Daisy-Back-Door-Motion.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Back-Door-Open.wav"
                                },
                                "v": "US-EN-Daisy-Back-Door-Open.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Front-Door-Motion.wav"
                                },
                                "v": "US-EN-Daisy-Front-Door-Motion.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Front-Door-Open.wav"
                                },
                                "v": "US-EN-Daisy-Front-Door-Open.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Front-Window-Open.wav"
                                },
                                "v": "US-EN-Daisy-Front-Window-Open.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Garage-Door-Open.wav"
                                },
                                "v": "US-EN-Daisy-Garage-Door-Open.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Guest-Bath-Leak.wav"
                                },
                                "v": "US-EN-Daisy-Guest-Bath-Leak.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Kitchen-Sink-Leak.wav"
                                },
                                "v": "US-EN-Daisy-Kitchen-Sink-Leak.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Kitchen-Window-Open.wav"
                                },
                                "v": "US-EN-Daisy-Kitchen-Window-Open.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Laundry-Room-Leak.wav"
                                },
                                "v": "US-EN-Daisy-Laundry-Room-Leak.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Master-Bath-Leak.wav"
                                },
                                "v": "US-EN-Daisy-Master-Bath-Leak.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Master-Bedroom-Window-Open.wav"
                                },
                                "v": "US-EN-Daisy-Master-Bedroom-Window-Open.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Office-Window-Open.wav"
                                },
                                "v": "US-EN-Daisy-Office-Window-Open.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Refrigerator-Leak.wav"
                                },
                                "v": "US-EN-Daisy-Refrigerator-Leak.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Daisy-Water-Heater-Leak.wav"
                                },
                                "v": "US-EN-Daisy-Water-Heater-Leak.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Back-Door-Closed.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Back-Door-Closed.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Back-Door-Locked.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Back-Door-Locked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Back-Door-Opened.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Back-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Back-Door-Unlocked.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Back-Door-Unlocked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Basement-Door-Closed.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Basement-Door-Closed.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Basement-Door-Locked.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Basement-Door-Locked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Basement-Door-Opened.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Basement-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Basement-Door-Unlocked.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Basement-Door-Unlocked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Boss-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Boss-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Boyfriend-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Boyfriend-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Cleaning-Supplies-Closet-Opened.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Cleaning-Supplies-Closet-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Coworker-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Coworker-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Daughter-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Daughter-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Friend-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Friend-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Front-Door-Closed.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Front-Door-Closed.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Front-Door-Locked.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Front-Door-Locked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Front-Door-Opened.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Front-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Front-Door-Unlocked.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Front-Door-Unlocked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Garage-Door-Closed.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Garage-Door-Closed.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Garage-Door-Opened.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Garage-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Girlfriend-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Girlfriend-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Good-Morning.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Good-Morning.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Good-Night.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Good-Night.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Liquor-Cabinet-Opened.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Liquor-Cabinet-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Motion-Detected.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Motion-Detected.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Motion-In-Basement.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Motion-In-Basement.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Motion-In-Bedroom.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Motion-In-Bedroom.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Motion-In-Game-Room.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Motion-In-Game-Room.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Motion-In-Garage.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Motion-In-Garage.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Motion-In-Kitchen.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Motion-In-Kitchen.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Motion-In-Living-Room.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Motion-In-Living-Room.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Motion-In-Theater.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Motion-In-Theater.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Motion-In-Wine-Cellar.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Motion-In-Wine-Cellar.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Patio-Door-Closed.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Patio-Door-Closed.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Patio-Door-Locked.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Patio-Door-Locked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Patio-Door-Opened.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Patio-Door-Opened.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Patio-Door-Unlocked.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Patio-Door-Unlocked.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Roommate-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Roommate-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Searching-For-Car-Keys.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Searching-For-Car-Keys.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Setting-The-Mood.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Setting-The-Mood.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Smartthings-Detected-A-Flood.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Smartthings-Detected-A-Flood.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Smartthings-Detected-Carbon-Monoxide.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Smartthings-Detected-Carbon-Monoxide.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Smartthings-Detected-Smoke.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Smartthings-Detected-Smoke.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Smoke-Detected-In-Basement.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Smoke-Detected-In-Basement.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Smoke-Detected-In-Garage.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Smoke-Detected-In-Garage.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Smoke-Detected-In-Kitchen.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Smoke-Detected-In-Kitchen.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Someone-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Someone-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Son-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Son-Is-Arriving.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Starting-Movie-Mode.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Starting-Movie-Mode.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Starting-Party-Mode.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Starting-Party-Mode.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Starting-Romance-Mode.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Starting-Romance-Mode.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-All-The-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-All-The-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-Air-Conditioner.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-Air-Conditioner.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-Bar-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-Bar-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-Chandelier.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-Chandelier.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-Family-Room-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-Family-Room-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-Hallway-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-Hallway-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-Kitchen-Light.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-Kitchen-Light.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-Light.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-Light.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-Mood-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-Mood-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-Off-The-TV.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-Off-The-TV.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-Air-Conditioner.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-Air-Conditioner.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-Bar-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-Bar-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-Chandelier.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-Chandelier.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-Family-Room-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-Family-Room-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-Hallway-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-Hallway-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-Kitchen-Light.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-Kitchen-Light.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-Light.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-Light.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-Mood-Lights.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-Mood-Lights.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Turning-On-The-TV.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Turning-On-The-TV.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Vacate-The-Premises.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Vacate-The-Premises.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Water-Detected-In-Basement.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Water-Detected-In-Basement.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Water-Detected-In-Garage.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Water-Detected-In-Garage.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Water-Detected-In-Kitchen.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Water-Detected-In-Kitchen.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Welcome-Home.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Welcome-Home.wav"
                            },
                            {
                                "l": {
                                    "en-US": "US-EN-Morgan-Freeman-Wife-Is-Arriving.wav"
                                },
                                "v": "US-EN-Morgan-Freeman-Wife-Is-Arriving.wav"
                            }
                        ]
                    }
                }
            },
            {
                "name": "customSound",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Custom Sound (Optional - will override pre-installed selection)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "interruptionLevel",
                "type": "str",
                "value": "active",
                "ui": {
                    "label": {
                        "en-US": "Interruption Level"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Passive"
                                },
                                "v": "passive"
                            },
                            {
                                "l": {
                                    "en-US": "Active (Default)"
                                },
                                "v": "active"
                            },
                            {
                                "l": {
                                    "en-US": "Time Sensitive"
                                },
                                "v": "time-sensitive"
                            },
                            {
                                "l": {
                                    "en-US": "Critical"
                                },
                                "v": "critical"
                            }
                        ]
                    }
                }
            },
            {
                "name": "userInfo",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Populate User Information"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "isClearNotificationsOnAction",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Clear notifications on Action Received?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "action1Title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 1 Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action1Uri",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 1 URL (optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action1ActivationMode",
                "type": "str",
                "value": "background",
                "ui": {
                    "label": {
                        "en-US": "Action 1 Activation Mode"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Background"
                                },
                                "v": "background"
                            },
                            {
                                "l": {
                                    "en-US": "Foreground"
                                },
                                "v": "foreground"
                            }
                        ]
                    }
                }
            },
            {
                "name": "action1AuthenticationRequired",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Action 1 App Authentication Required?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "action1Destructive",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Action 1 Destructive?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "action1Behavior",
                "type": "str",
                "value": "default",
                "ui": {
                    "label": {
                        "en-US": "Action 1 Behavior"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Default"
                                },
                                "v": "default"
                            },
                            {
                                "l": {
                                    "en-US": "Text Input"
                                },
                                "v": "textInput"
                            }
                        ]
                    }
                }
            },
            {
                "name": "action1TextInputButtonTitle",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 1 Text Input Button Title (Required if behavior is Text Input)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action1TextInputPlaceHolder",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 1 Text Input Placeholder (Optional - only if behavior is Text Input)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action1Icon",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 1 Icon (Optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action2Title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 2 Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action2Uri",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 2 URL (optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action2ActivationMode",
                "type": "str",
                "value": "background",
                "ui": {
                    "label": {
                        "en-US": "Action 2 Activation Mode"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Background"
                                },
                                "v": "background"
                            },
                            {
                                "l": {
                                    "en-US": "Foreground"
                                },
                                "v": "foreground"
                            }
                        ]
                    }
                }
            },
            {
                "name": "action2AuthenticationRequired",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Action 2 App Authentication Required?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "action2Destructive",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Action 2 Destructive?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "action2Behavior",
                "type": "str",
                "value": "default",
                "ui": {
                    "label": {
                        "en-US": "Action 2 Behavior"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Default"
                                },
                                "v": "default"
                            },
                            {
                                "l": {
                                    "en-US": "Text Input"
                                },
                                "v": "textInput"
                            }
                        ]
                    }
                }
            },
            {
                "name": "action2TextInputButtonTitle",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 2 Text Input Button Title (Required if behavior is Text Input)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action2TextInputPlaceHolder",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 2 Text Input Placeholder (Optional - only if behavior is Text Input)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action2Icon",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 2 Icon (Optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action3Title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 3 Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action3Uri",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 3 URL (optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action3ActivationMode",
                "type": "str",
                "value": "background",
                "ui": {
                    "label": {
                        "en-US": "Action 3 Activation Mode"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Background"
                                },
                                "v": "background"
                            },
                            {
                                "l": {
                                    "en-US": "Foreground"
                                },
                                "v": "foreground"
                            }
                        ]
                    }
                }
            },
            {
                "name": "action3AuthenticationRequired",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Action 3 App Authentication Required?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "action3Destructive",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Action 3 Destructive?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "action3Behavior",
                "type": "str",
                "value": "default",
                "ui": {
                    "label": {
                        "en-US": "Action 3 Behavior"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Default"
                                },
                                "v": "default"
                            },
                            {
                                "l": {
                                    "en-US": "Text Input"
                                },
                                "v": "textInput"
                            }
                        ]
                    }
                }
            },
            {
                "name": "action3TextInputButtonTitle",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 3 Text Input Button Title (Required if behavior is Text Input)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action3TextInputPlaceHolder",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 3 Text Input Placeholder (Optional - only if behavior is Text Input)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action3Icon",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 3 Icon (Optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action4Title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 4 Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action4Uri",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 4 URL (optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action4ActivationMode",
                "type": "str",
                "value": "background",
                "ui": {
                    "label": {
                        "en-US": "Action 4 Activation Mode"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Background"
                                },
                                "v": "background"
                            },
                            {
                                "l": {
                                    "en-US": "Foreground"
                                },
                                "v": "foreground"
                            }
                        ]
                    }
                }
            },
            {
                "name": "action4AuthenticationRequired",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Action 4 App Authentication Required?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "action4Destructive",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Action 4 Destructive?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "action4Behavior",
                "type": "str",
                "value": "default",
                "ui": {
                    "label": {
                        "en-US": "Action 4 Behavior"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Default"
                                },
                                "v": "default"
                            },
                            {
                                "l": {
                                    "en-US": "Text Input"
                                },
                                "v": "textInput"
                            }
                        ]
                    }
                }
            },
            {
                "name": "action4TextInputButtonTitle",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 4 Text Input Button Title (Required if behavior is Text Input)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action4TextInputPlaceHolder",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 4 Text Input Placeholder (Optional - only if behavior is Text Input)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "action4Icon",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 4 Icon (Optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "latitudeFirst",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Latitude for Pin 1"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "longitudeFirst",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Longitude for Pin 1"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "latitudeSecond",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Latitude for Pin 2"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "longitudeSecond",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Longitude for Pin 2"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "showLineBetweenPoints",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Show a line between points?"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "showCompass",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Show a compass on the map?"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "showPointsOfInterest",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Show points of interest?"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "showScale",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Show scale information on the map?"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "showTraffic",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Show Traffic?"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "showUserLocation",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Show User Location?"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "cameraEntity",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Camera Entity"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "imagePath",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Image Path (10MB limit)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "videoPath",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Video Path (50MB limit)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "audioPath",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Audio Path (5MB limit)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "contentUrl",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Content URL (overrides image/video/audio)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "lazyLoading",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Load Media in Notification Lazily?"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "hideThumbnail",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Hide thumbnail?"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#D8BFD8",
        "outputLabels": [
            "Action 1",
            "Action 2",
            "Action 3",
            "Cleared"
        ],
        "icon": "font-awesome/fa-mobile-phone",
        "status": {
            "x": 200,
            "y": 320,
            "wires": [
                {
                    "id": "f87ecb61310bc411",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "1fb2958d.14f89a",
        "type": "server",
        "name": "Home Assistant",
        "version": 2,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": true,
        "heartbeatInterval": "10"
    },
    {
        "id": "4c58280.c1ed4d8",
        "type": "amazon config",
        "name": "AWS-withConfig",
        "region": "us-east-1",
        "proxyRequired": false,
        "proxy": ""
    },
    {
        "id": "61afaa8ff2a47189",
        "type": "moonNode-connector",
        "server": "voron-v0.iot.beta5.org:7125"
    },
    {
        "id": "63a02432e8112030",
        "type": "moonNode-connector",
        "server": "vcore3.iot.beta5.org"
    },
    {
        "id": "1279c405858f966e",
        "type": "ha-entity-config",
        "server": "1fb2958d.14f89a",
        "name": "vcore3_heat_soak_cancel",
        "version": 2,
        "haConfig": [
            {
                "property": "name",
                "value": "V-Core 3 Heat Soak Cancel"
            },
            {
                "property": "icon",
                "value": "mdi:printer-3d-nozzle-heat-outline"
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "entityType": "button"
    },
    {
        "id": "6a9c966b66b0321c",
        "type": "ha-entity-config",
        "server": "1fb2958d.14f89a",
        "name": "vcore3_heat_soak_45m_110deg",
        "version": 2,
        "haConfig": [
            {
                "property": "name",
                "value": "V-Core 3 Heat Soak 45m @ 110°"
            },
            {
                "property": "icon",
                "value": "mdi:printer-3d-nozzle-heat-outline"
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "entityType": "button"
    },
    {
        "id": "c9d6062829ddc012",
        "type": "influxdb",
        "hostname": "influxdb.iot.beta5.org",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb.iot.beta5.org:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "bdab178cf02ef0af",
        "type": "unifi-access-controller",
        "name": "UDM-Pro",
        "controllerIp": "192.168.50.1",
        "controllerPort": "",
        "controllerType": "UniFiOSConsole"
    },
    {
        "id": "d5858a856817f92e",
        "type": "api-call-service",
        "z": "8ee3d653bff5e3e5",
        "d": true,
        "name": "in-hass notif",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "persistent_notification",
        "service": "create",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"notification_id\": $env(\"notif_id\") & \"_job_status\"\t       ,\t   \"title\": $env(\"notif_title\"),\t   \"message\": $env(\"notif_message\")\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "85688eadd98c41a1",
        "type": "api-call-service",
        "z": "8ee3d653bff5e3e5",
        "d": true,
        "name": "notify my iPhone",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "notify",
        "service": "mobile_app_camilla_13_0",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"title\": $env(\"notif_title\"),\t   \"message\": $env(\"notif_message\"),\t   \"data\": {\t       \"subtitle\": payload.fullModel.print_stats.filename,\t       \"push\": {\t           \"thread-id\": $env(\"notif_id\")\t       },\t       \"@todo:image\": \"https://s3.amazonaws.com/\" & \"Bucket\" & \"/\" & \"Key\",\t       \"entity_id\": $env(\"camera_id\")\t    }\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 710,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e9bf244afc398f1b",
        "type": "fan",
        "z": "8ee3d653bff5e3e5",
        "name": "",
        "x": 430,
        "y": 80,
        "wires": [
            [
                "d5858a856817f92e",
                "85688eadd98c41a1",
                "ed0a5df69bd99338"
            ]
        ]
    },
    {
        "id": "ed0a5df69bd99338",
        "type": "debug",
        "z": "8ee3d653bff5e3e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "msg & \" \" & $env(\"notif_id\")",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 180,
        "wires": []
    },
    {
        "id": "0c74efbb9a85bee5",
        "type": "function",
        "z": "914734122ce79fcd",
        "name": "create service call",
        "func": "msg._originalPayload = msg.payload;\nlet flow_msg_variables = {\n    tag: '',\n    service: '',\n    message: msg,\n    date_created: Date.now()\n}\n\n//flow.set('latestMessage', msg);\n\nvar xTitle = \"\";\nvar xSubtitle = \"\";\nvar xMessage = \"\";\nvar xServices = \"\";\nvar xTag = \"\";\nvar xUrl = \"\";\n// overrides\nif (typeof msg.notificationOverride !== 'undefined' && msg.notificationOverride !== null) {\n    if (typeof msg.notificationOverride.title !== 'undefined' && msg.notificationOverride.title !=='' && msg.notificationOverride.title !== null){\n        xTitle = msg.notificationOverride.title;\n    } else {\n        xTitle = env.get('title');\n    }\n    if (typeof msg.notificationOverride.subtitle !== 'undefined' && msg.notificationOverride.subtitle !==''  && msg.notificationOverride.subtitle !== null){\n        xSubtitle = msg.notificationOverride.subtitle;\n    } else {\n        xSubtitle = env.get('subtitle');\n    }\n    if (typeof msg.notificationOverride.message !== 'undefined' && msg.notificationOverride.message !=='' &&  msg.notificationOverride.message !== null){\n        xMessage = msg.notificationOverride.message;\n    } else {\n        xMessage = env.get('message');\n    }\n    if (typeof msg.notificationOverride.url !== 'undefined' && msg.notificationOverride.url !=='' &&  msg.notificationOverride.url !== null){\n        xUrl = msg.notificationOverride.url;\n    } else {\n        xUrl = env.get('notificationUrl');\n    }\n    if (typeof msg.notificationOverride.services !== 'undefined' && msg.notificationOverride.services !=='' && msg.notificationOverride.services !== null){\n        xServices = msg.notificationOverride.services;\n    } else {\n        xServices = env.get('service');\n    }\n//    flow.set('service', xServices);\n    flow_msg_variables.service=xServices;\n    if (typeof msg.notificationOverride.tag !== 'undefined' && msg.notificationOverride.tag !=='' && msg.notificationOverride.tag !== null){\n        xTag = msg.notificationOverride.tag.replace(/[^\\w\\s]/gi, '').replace(/\\s+/g,'_').toUpperCase();\n    } else {\n        if (env.get('tag') !== '') {\n            xTag = `${env.get('tag').replace(/[^\\w\\s]/gi, '').replace(/\\s+/g,'_').toUpperCase()}`;\n        } else {\n            // need to still set this to something in case clear_notification is sent.\n            xTag = `${env.get('title').replace(/[^\\w\\s]/gi, '').replace(/\\s+/g,'_').toUpperCase()}_${flow.get('random')}`;\n        }\n    }\n//support multiple tags per flow\n    //flow.set('tag',xTag);\n    flow_msg_variables.tag=xTag;\n} else {\n    // If no override is sent in...\n    if (env.get('tag') !== '') {\n        xTag = `${env.get('tag').replace(/[^\\w\\s]/gi, '').replace(/\\s+/g,'_').toUpperCase()}`;\n    } else {\n        // need to still set this to something in case clear_notification is sent.\n        xTag = `${env.get('title').replace(/[^\\w\\s]/gi, '').replace(/\\s+/g,'_').toUpperCase()}_${flow.get('random')}`;\n    }\n//support multiple tags per flow\n//    flow.set('tag',xTag);\n    flow_msg_variables.tag=xTag;\n    \n    xServices = env.get('service');\n//    flow.set('service', xServices);\n    flow_msg_variables.service=xServices;\n    \n    xTitle = env.get('title');\n    xSubtitle = env.get('subtitle');\n    xMessage = env.get('message');\n    xUrl = env.get('notificationUrl');\n}\nlet all_flow_messages= flow.get('flow_messages');\nif (!all_flow_messages){\n    all_flow_messages=[];\n}\nlet new_flow_messages=[];\nfor(var i=0;i<all_flow_messages.length;i++){//copy (and reset) the messages array\n    if ((all_flow_messages[i].tag==flow_msg_variables.tag)&&(all_flow_messages[i].service==flow_msg_variables.service)){\n        continue;//don't copy this message\n    }else{\n        if (Date.now()-all_flow_messages[i].date_created<86400000){//only copy messages less than 24h old\n            new_flow_messages.push(all_flow_messages[i]);\n        }\n    }\n}\nnew_flow_messages.push(flow_msg_variables);\nflow.set('flow_messages',new_flow_messages);\n\nconst services = xServices;//flow.get('service');\nif(!services) {\n    node.status({\n        text: 'no services defined',\n        shape: 'ring',\n        fill: 'red'\n    });\n    return;    \n} else if (services == \"NOONE\"){\n    node.status({\n        text: 'No one to send to',\n        shape: 'ring',\n        fill: 'yellow'\n    });\n    return;\n}\n\n// create actions\nconst actions = [];\n[1,2,3,4].forEach(i => {\n    const name = `action${i}`\n    if (env.get(`${name}Title`) !== ''){\n        const action = env.get(`${name}Title`).replace(/[^\\w\\s]/gi, '').replace(/\\s+/g,'_').toUpperCase();\n        const title = env.get(`${name}Title`);\n        const activationMode = env.get(`${name}ActivationMode`);  \n        \n        const uri = env.get(`${name}Uri`);\n        const textInputButtonTitle = env.get(`${name}TextInputButtonTitle`);\n        const textInputPlaceholder = env.get(`${name}TextInputPlaceHolder`);\n        const authenticationRequired = env.get(`${name}AuthenticationRequired`);\n        const destructive = env.get(`${name}Destructive`);\n        const behavior = env.get(`${name}Behavior`);\n        const icon = env.get(`${name}Icon`);\n        \n        const actionObject = {};\n        actionObject.action = action;\n        actionObject.title = title;\n        actionObject.activationMode = activationMode;\n        \n        if (uri != \"\") actionObject.uri = uri;\n        if (textInputButtonTitle != \"\") actionObject.textInputButtonTitle = textInputButtonTitle;\n        if (textInputPlaceholder != \"\") actionObject.textInputPlaceholder = textInputPlaceholder;\n        if (authenticationRequired != \"\") actionObject.authenticationRequired = authenticationRequired;\n        if (destructive != \"\") actionObject.destructive = destructive;\n        if (behavior != \"\") actionObject.behavior = behavior;\n        if (icon != \"\") actionObject.icon = icon;\n        \n        actions.push(actionObject);\n    }\n});\n// create msg object\nmsg.payload = {\n        domain: 'notify',\n        data: {\n            title: xTitle,\n            message: xMessage,\n            data: {\n                push: {},\n                tag: xTag\n            }\n        }\n    };\nif (actions.length > 0) {\n    msg.payload.data.data.action_data = {tag: xTag};\n    msg.payload.data.data.actions = actions;\n}\n// notification url\nif (xUrl !== \"\") {\n    msg.payload.data.data.url = {};\n    msg.payload.data.data.url = xUrl;\n}\n// subtitle\nif (xSubtitle !== '') {\n    msg.payload.data.data.subtitle = xSubtitle;\n}\n// sound information\nmsg.payload.data.data.push.sound = {};\n\nif (env.get('customSound').length > 0){\n    msg.payload.data.data.push.sound.name = env.get('customSound');\n} else if (env.get('customSoundPreInstalled').length > 0) {\n    if(env.get('customSoundPreInstalled')=='none'){\n        msg.payload.data.data.push.sound = 'none';\n    }else{\n        msg.payload.data.data.push.sound.name = env.get('customSoundPreInstalled');\n    }\n} else {\n    msg.payload.data.data.push.sound.name = 'default';\n}\n\n//if (env.get('isCriticalNotification')) {\n//    msg.payload.data.data.push.sound.critical = 1;\n//    msg.payload.data.data.push.sound.volume = 1.0;\n//}\nmsg.payload.data.data.push[\"interruption-level\"] = env.get('interruptionLevel');\n// group thread id\nif (env.get('group') !== '') {\n    msg.payload.data.data.group = env.get('group');\n}\n\n// Map Information\nif (env.get('latitudeFirst') !== 0 && env.get('longitudeFirst') !== 0){\n    msg.payload.data.data.action_data.latitude = env.get('latitudeFirst');\n    msg.payload.data.data.action_data.longitude = env.get('longitudeFirst');\n    if (env.get('latitudeSecond') !== 0 && env.get('longitudeSecond') !== 0){\n        msg.payload.data.data.action_data.second_latitude = env.get('latitudeSecond');\n        msg.payload.data.data.action_data.second_longitude = env.get('longitudeSecond');\n        // add in all the extras, which default to false.\n        msg.payload.data.data.action_data.shows_line_between_points = env.get('showLineBetweenPoints');\n        msg.payload.data.data.action_data.shows_compass = env.get('showCompass');\n        msg.payload.data.data.action_data.shows_points_of_interest = env.get('showPointsOfInterest');\n        msg.payload.data.data.action_data.shows_scale = env.get('showScale');\n        msg.payload.data.data.action_data.shows_traffic = env.get('showTraffic');\n        msg.payload.data.data.action_data.shows_user_location = env.get('showUserLocation');\n    }\n}\n// camera information\nif (env.get('cameraEntity') !== '') {\n    msg.payload.data.data.entity_id = env.get('cameraEntity');\n}\n// media information\nif (env.get('contentUrl') !== '') {\n\n} else {\n    if (env.get('imagePath') !== '') {\n        msg.payload.data.data.image = env.get('imagePath');\n    }\n    if (env.get('videoPath') !== '') {\n        msg.payload.data.data.video = env.get('videoPath');\n    }\n    if (env.get('audioPath') !== '') {\n        msg.payload.data.data.audio = env.get('audioPath');\n    }\n}\nif (env.get('contentUrl') !== '' || env.get('imagePath') !== '' || env.get('videoPath') !== '' || env.get('audioPath') !== '') {\n    if (env.get('lazyLoading')) {\n        msg.payload.data.data.lazy = env.get('lazyLoading');\n    }\n    if (env.get('hideThumbnail')) {\n        msg.payload.data.data.attachment = {};\n        msg.payload.data.data.attachment['hide-thumbnail'] = env.get('hideThumbnail');\n    }\n}\nservices.trim().split(/,\\s*/).forEach(service => {\n    if(!service) return;\n    msg.payload.service = service;\n    node.send(msg);\n});\n\nnode.done();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "flow.set('random',Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5).toUpperCase());\n",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 40,
        "wires": [
            [
                "623033ccf4ee0715"
            ]
        ]
    },
    {
        "id": "7bb055c340123ca6",
        "type": "switch",
        "z": "914734122ce79fcd",
        "name": "which action?",
        "property": "responseIndex",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1260,
        "y": 220,
        "wires": [
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "f87ecb61310bc411",
        "type": "status",
        "z": "914734122ce79fcd",
        "name": "",
        "scope": [
            "0c74efbb9a85bee5",
            "6cdec7ddd37347ca",
            "d5bbdcb0c9aae966",
            "a18477a92277fde6"
        ],
        "x": 80,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "6cdec7ddd37347ca",
        "type": "function",
        "z": "914734122ce79fcd",
        "name": "build message",
        "func": "const latestMessage = flow.get('latestMessage');\nconst event = msg.payload.event;\n\nlatestMessage.payload = latestMessage._originalPayload;\nlatestMessage.eventData = msg.payload;\ndelete latestMessage._originalPayload;\n\nif(env.get('userInfo')) {\n    const userData = msg.userData.find(u => u.id === msg.payload.context.user_id);\n    latestMessage.userData = userData;\n}\n\n\ntry{ //For Some reason it is called twice, second time with empty env.get values\n    const index = [1,2,3,4].find(i => env.get(`action${i}Title`).replace(/[^\\w\\s]/gi, '').replace(/\\s+/g,'_').toUpperCase() === event.actionName);\n    flow.set(\"responseIndex\",index);\n}catch(e){}\ntry{\n    node.status({\n        text: `${env.get(`action${index}Title`).replace(/[^\\w\\s]/gi, '').replace(/\\s+/g,'_').toUpperCase()} at: ${getPrettyDate()}`,\n        shape: 'dot',\n        fill: 'green'\n    });\n}catch(e){}\nreturn latestMessage;\n\n\nfunction getPrettyDate() {\n    return new Date().toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour12: false,\n        hour: 'numeric',\n        minute: 'numeric',\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 220,
        "wires": [
            [
                "7bb055c340123ca6"
            ]
        ]
    },
    {
        "id": "315c4ad3c3647075",
        "type": "switch",
        "z": "914734122ce79fcd",
        "name": "belongs here?",
        "property": "payload.event.action_data.tag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tag",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "95c45e1dfd4436e0",
        "type": "ha-api",
        "z": "914734122ce79fcd",
        "name": "get user info",
        "server": "1fb2958d.14f89a",
        "version": 1,
        "debugenabled": false,
        "protocol": "websocket",
        "method": "get",
        "path": "",
        "data": "{\"type\": \"config/auth/list\"}",
        "dataType": "json",
        "responseType": "json",
        "outputProperties": [
            {
                "property": "userData",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 850,
        "y": 260,
        "wires": [
            [
                "6cdec7ddd37347ca"
            ]
        ]
    },
    {
        "id": "52754e832dea9cb6",
        "type": "switch",
        "z": "914734122ce79fcd",
        "name": "fetch user info?",
        "property": "userInfo",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 840,
        "y": 220,
        "wires": [
            [
                "95c45e1dfd4436e0"
            ],
            [
                "6cdec7ddd37347ca"
            ]
        ]
    },
    {
        "id": "66cdad51e119544d",
        "type": "server-events",
        "z": "914734122ce79fcd",
        "name": "ios.notification_action_fired",
        "server": "1fb2958d.14f89a",
        "version": 1,
        "event_type": "ios.notification_action_fired",
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "waitForRunning": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "$outputData(\"eventData\").event_type",
                "valueType": "jsonata"
            },
            {
                "property": "event_type",
                "propertyType": "msg",
                "value": "$outputData(\"eventData\").event_type",
                "valueType": "jsonata"
            }
        ],
        "x": 130,
        "y": 180,
        "wires": [
            [
                "1d74d403fab61ed8"
            ]
        ]
    },
    {
        "id": "d5bbdcb0c9aae966",
        "type": "api-call-service",
        "z": "914734122ce79fcd",
        "name": "Send Notifications",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "notify",
        "service": "",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "callServiceData",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1130,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a18477a92277fde6",
        "type": "function",
        "z": "914734122ce79fcd",
        "name": "create CLEAR service call",
        "func": "msg._originalPayload = msg.payload;\n//flow.set('latestMessage', msg);\nvar tag_to_clear = \"\";\nvar services = \"\";\nvar clearAll = false;\nif (typeof msg.notificationOverride !== 'undefined') {\n    if (typeof msg.notificationOverride.clear !== 'undefined' && msg.notificationOverride.clear !== null && msg.notificationOverride.clear) {\n        clearAll = true;\n    }\n    if (typeof msg.notificationOverride.services !== 'undefined' && msg.notificationOverride.services !== null && msg.notificationOverride.services){\n        services = msg.notificationOverride.services;\n    }\n    if (typeof msg.notificationOverride.tag !== 'undefined' && msg.notificationOverride.tag !== null && msg.notificationOverride.tag){\n        tag_to_clear = msg.notificationOverride.tag.replace(/[^\\w\\s]/gi, '').replace(/\\s+/g,'_').toUpperCase();//formatting tags as sent to the phone before\n    }\n}\nif (tag_to_clear==\"\"){//no specific tag sent, clear the last message.\n    var all_flow_messages= flow.get('flow_messages');\n    if(all_flow_messages) {\n        var last_message= all_flow_messages.pop();\n        if (last_message){//on nodeRED restart\n            tag_to_clear= last_message.tag;\n            services = last_message.service;//override service to the one used in last message sent\n            flow.set('flow_messages',all_flow_messages);//clear the message from memory\n        }\n    }\n}\n\nif(services==\"\") {\n    node.status({\n        text: 'no services defined',\n        shape: 'ring',\n        fill: 'red'\n    });\n    return;    \n}\nif(tag_to_clear==\"\") {\n    node.status({\n        text: 'no messages to delete',\n        shape: 'ring',\n        fill: 'red'\n    });\n    return;    \n}\n// create ios msg object\nmsg.payload = {\n        domain: 'notify',\n        data: {\n            message: \"clear_notification\",\n            data: {\n                tag: tag_to_clear //flow.get('tag'),\n            }\n        }\n    };\n\nfunction getPrettyDate() {\n    return new Date().toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour12: false,\n        hour: 'numeric',\n        minute: 'numeric',\n    });\n}\n\nif (clearAll){\n    delete msg.notificationOverride;\n}\n    \nvar xCountCleared = 0;\nservices.trim().split(/,\\s*/).forEach(service => {\n    if(!service) return;\n    // only clear on devices that didn't send the event.\n    if (clearAll){\n        msg.payload.service = service;\n        node.send(msg);\n        xCountCleared++;\n    } else if (!service.includes(msg._originalPayload.event.sourceDeviceID)){\n        msg.payload.service = service;\n        node.send(msg);\n        xCountCleared++;\n    }\n});\nif (xCountCleared > 0) {\n    node.status({\n        text: `${xCountCleared} messages cleared at: ${getPrettyDate()}`,\n        shape: 'dot',\n        fill: 'blue'\n    });\n} else {\n    node.status({\n        text: `No messages cleared: ${getPrettyDate()}`,\n        shape: 'dot',\n        fill: 'red'\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 80,
        "wires": [
            [
                "b649a0d3bf05a394"
            ]
        ]
    },
    {
        "id": "2f18a199fe3023b9",
        "type": "switch",
        "z": "914734122ce79fcd",
        "name": "Clear Notification on Action?",
        "property": "isClearNotificationsOnAction",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 420,
        "y": 220,
        "wires": [
            [
                "a18477a92277fde6",
                "ca88e6add3be35fc"
            ],
            [
                "52754e832dea9cb6"
            ]
        ]
    },
    {
        "id": "59d66e6372aaca66",
        "type": "api-call-service",
        "z": "914734122ce79fcd",
        "name": "Clear Notifications",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "notify",
        "service": "",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "callServiceData",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1130,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ca88e6add3be35fc",
        "type": "delay",
        "z": "914734122ce79fcd",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 660,
        "y": 220,
        "wires": [
            [
                "52754e832dea9cb6"
            ]
        ]
    },
    {
        "id": "f8d958779acdc007",
        "type": "switch",
        "z": "914734122ce79fcd",
        "name": "clear?",
        "property": "notificationOverride.clear",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "null"
            },
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 170,
        "y": 60,
        "wires": [
            [
                "0c74efbb9a85bee5"
            ],
            [
                "0c74efbb9a85bee5"
            ],
            [
                "0c74efbb9a85bee5"
            ],
            [
                "a18477a92277fde6"
            ]
        ]
    },
    {
        "id": "b649a0d3bf05a394",
        "type": "delay",
        "z": "914734122ce79fcd",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 910,
        "y": 80,
        "wires": [
            [
                "59d66e6372aaca66"
            ]
        ]
    },
    {
        "id": "623033ccf4ee0715",
        "type": "delay",
        "z": "914734122ce79fcd",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 40,
        "wires": [
            [
                "d5bbdcb0c9aae966"
            ]
        ]
    },
    {
        "id": "1d74d403fab61ed8",
        "type": "function",
        "z": "914734122ce79fcd",
        "name": "belongs here?",
        "func": "let msg_tag=msg.payload.event.action_data.tag;\nlet all_flow_messages= flow.get('flow_messages');\n//node.warn({'message tag':msg_tag,'flow_messages':all_flow_messages});\nif(all_flow_messages){\n    for (var i=0;i<all_flow_messages.length;i++){\n        if (all_flow_messages[i].tag.trim()==msg_tag.trim()){\n//node.warn(all_flow_messages[i])\n            flow.set('latestMessage',all_flow_messages[i].message);\n            return [msg,null];\n        }\n    }\n}\nreturn [null,msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "2f18a199fe3023b9"
            ],
            []
        ]
    },
    {
        "id": "bbe703d7e0a49acf",
        "type": "comment",
        "z": "914734122ce79fcd",
        "name": "https://gist.github.com/okets/c7baea968aab019a09c9d2c80df29d40",
        "info": "",
        "x": 310,
        "y": 480,
        "wires": []
    },
    {
        "id": "7a6f1441.9bac74",
        "type": "server-state-changed",
        "z": "6c71644f.90490c",
        "name": "motion detected: front door ⚠️",
        "server": "1fb2958d.14f89a",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "binary_sensor.motion_front_door",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "do_notify",
                "propertyType": "msg",
                "value": "true",
                "valueType": "bool"
            },
            {
                "property": "camera_entity_id",
                "propertyType": "msg",
                "value": "camera.front_door",
                "valueType": "str"
            },
            {
                "property": "is_critical",
                "propertyType": "msg",
                "value": "0",
                "valueType": "num"
            },
            {
                "property": "snapshot_type",
                "propertyType": "msg",
                "value": "motion",
                "valueType": "str"
            }
        ],
        "x": 150,
        "y": 140,
        "wires": [
            [
                "5c1a8d29.db4a24"
            ],
            []
        ]
    },
    {
        "id": "8cfc62ab.42de7",
        "type": "inject",
        "z": "6c71644f.90490c",
        "name": "motion",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "data",
                "v": "{\"entity_id\":\"binary_sensor.motion_front_door\",\"old_state\":{\"entity_id\":\"binary_sensor.motion_front_door\",\"state\":\"off\",\"attributes\":{\"last_tripped_time\":\"2022-04-03T23:56:42.072000+00:00\",\"event_score\":0,\"attribution\":\"Powered by UniFi Protect Server\",\"device_class\":\"motion\",\"friendly_name\":\"Front Door Motion\"},\"last_changed\":\"2022-04-03T23:56:43.167677+00:00\",\"last_updated\":\"2022-04-03T23:56:43.201082+00:00\",\"context\":{\"id\":\"3457201483ab6f8d12b74a51de91a54f\",\"parent_id\":null,\"user_id\":null},\"original_state\":\"off\"},\"new_state\":{\"entity_id\":\"binary_sensor.motion_front_door\",\"state\":\"on\",\"attributes\":{\"last_tripped_time\":\"2022-04-04T00:03:02.216000+00:00\",\"event_score\":0,\"attribution\":\"Powered by UniFi Protect Server\",\"device_class\":\"motion\",\"friendly_name\":\"Front Door Motion\"},\"last_changed\":\"2022-04-04T00:03:02.334782+00:00\",\"last_updated\":\"2022-04-04T00:03:02.334782+00:00\",\"context\":{\"id\":\"4620ca65ef9ccd45f7e6773eb9507051\",\"parent_id\":null,\"user_id\":null},\"original_state\":\"on\",\"timeSinceChangedMs\":72}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "do_notify",
                "v": "true",
                "vt": "bool"
            },
            {
                "p": "camera_entity_id",
                "v": "camera.front_door",
                "vt": "str"
            },
            {
                "p": "is_critical",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "snapshot_type",
                "v": "test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "binary_sensor.motion_front_door",
        "payload": "on",
        "payloadType": "str",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "5c1a8d29.db4a24"
            ]
        ]
    },
    {
        "id": "5c1a8d29.db4a24",
        "type": "change",
        "z": "6c71644f.90490c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "msg",
                "to": "$substringAfter(topic, \"binary_sensor.motion_\")",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 180,
        "wires": [
            [
                "3296c10a.9b412e"
            ]
        ]
    },
    {
        "id": "22b532a0.3b8d26",
        "type": "api-call-service",
        "z": "6c71644f.90490c",
        "name": "notify my iPhone",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "notify",
        "service": "mobile_app_camilla_13_0",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"title\": data.new_state.attributes.friendly_name,\t   \"message\": message,\t   \"data\": {\t       \"subtitle\": data.new_state.attributes.event_object,\t       \"push\": {\t           \"thread-id\": \"home-motion-\" & topic,\t           \"sound\": {\t                \"name\": \"default\",\t                \"critical\": is_critical,\t                \"volume\": 1\t           }\t       },\t       \"url\": \"unifi-protect://\",\t       \"image\": \"https://s3.amazonaws.com/\" & Bucket & \"/\" & Key,\t       \"@todo:entity_id\": camera_entity_id\t    }\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2010,
        "y": 80,
        "wires": [
            [
                "182c79de78648a0c"
            ]
        ]
    },
    {
        "id": "3296c10a.9b412e",
        "type": "ha-api",
        "z": "6c71644f.90490c",
        "name": "get camera entity",
        "server": "1fb2958d.14f89a",
        "version": 1,
        "debugenabled": false,
        "protocol": "http",
        "method": "get",
        "path": "camera_proxy/{{{ camera_entity_id }}}",
        "data": "{}",
        "dataType": "jsonata",
        "responseType": "arraybuffer",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 990,
        "y": 220,
        "wires": [
            [
                "17801fb8.a006b8",
                "a1c6a8a6.870ca",
                "2beff0bd2c5053cc",
                "ec749bf69cfdb677",
                "b0839e1fe1b83e43"
            ]
        ]
    },
    {
        "id": "e4a86753.94dcf8",
        "type": "AWS S3",
        "z": "6c71644f.90490c",
        "aws": "4c58280.c1ed4d8",
        "operation": "PutObject",
        "Bucket": "",
        "Key": "",
        "UploadId": "",
        "CopySource": "",
        "Id": "",
        "Delete": "",
        "AccelerateConfiguration": "",
        "AnalyticsConfiguration": "",
        "CORSConfiguration": "",
        "ServerSideEncryptionConfiguration": "",
        "IntelligentTieringConfiguration": "",
        "InventoryConfiguration": "",
        "BucketLoggingStatus": "",
        "MetricsConfiguration": "",
        "NotificationConfiguration": "",
        "OwnershipControls": "",
        "Policy": "",
        "ReplicationConfiguration": "",
        "RequestPaymentConfiguration": "",
        "Tagging": "",
        "VersioningConfiguration": "",
        "WebsiteConfiguration": "",
        "PublicAccessBlockConfiguration": "",
        "Expression": "",
        "ExpressionType": "",
        "InputSerialization": "",
        "OutputSerialization": "",
        "PartNumber": "",
        "name": "upload to s3",
        "x": 1810,
        "y": 100,
        "wires": [
            [
                "22b532a0.3b8d26"
            ],
            [
                "9544fb61.5ab438",
                "42154f6c.cdcad8"
            ]
        ],
        "icon": "font-awesome/fa-cloud-upload"
    },
    {
        "id": "cdcd22b2.55961",
        "type": "function",
        "z": "6c71644f.90490c",
        "name": "build PutObject",
        "func": "msg.Body = msg.payload;\nmsg.Bucket = flow.get(\"s3\").bucket;\n\nmsg.Key = flow.get(\"s3\").prefix +\n    msg.snapshot_type +\n    \"_snapshot_\" + (new Date()).toISOString() +\n     \"_\" +\n    msg.camera_entity_id.split(\".\")[1] +\n    \".jpg\";\n\n// node.warn(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 100,
        "wires": [
            [
                "e4a86753.94dcf8"
            ]
        ]
    },
    {
        "id": "9544fb61.5ab438",
        "type": "debug",
        "z": "6c71644f.90490c",
        "name": "err",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 140,
        "wires": []
    },
    {
        "id": "42154f6c.cdcad8",
        "type": "api-call-service",
        "z": "6c71644f.90490c",
        "name": "show error",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": true,
        "domain": "notify",
        "service": "persistent_notification",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"title\": err.code,\t   \"message\": err.message\t}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2050,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7d3b2b3.38c9854",
        "type": "server-state-changed",
        "z": "6c71644f.90490c",
        "name": "motion detected: garage/alley",
        "server": "1fb2958d.14f89a",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "binary_sensor.motion_garage_alley",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "camera_entity_id",
                "propertyType": "msg",
                "value": "camera.garage_alley",
                "valueType": "str"
            },
            {
                "property": "is_critical",
                "propertyType": "msg",
                "value": "0",
                "valueType": "num"
            },
            {
                "property": "snapshot_type",
                "propertyType": "msg",
                "value": "motion",
                "valueType": "str"
            }
        ],
        "x": 140,
        "y": 200,
        "wires": [
            [
                "5c1a8d29.db4a24"
            ],
            []
        ]
    },
    {
        "id": "ef42fb76.2941f",
        "type": "server-state-changed",
        "z": "6c71644f.90490c",
        "name": "motion detected: parking pad",
        "server": "1fb2958d.14f89a",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "binary_sensor.motion_parking_pad",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "camera_entity_id",
                "propertyType": "msg",
                "value": "camera.parking_pad",
                "valueType": "str"
            },
            {
                "property": "is_critical",
                "propertyType": "msg",
                "value": "0",
                "valueType": "num"
            },
            {
                "property": "snapshot_type",
                "propertyType": "msg",
                "value": "motion",
                "valueType": "str"
            }
        ],
        "x": 140,
        "y": 260,
        "wires": [
            [
                "5c1a8d29.db4a24"
            ],
            []
        ]
    },
    {
        "id": "f8f5cb6c.5798a8",
        "type": "inject",
        "z": "6c71644f.90490c",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "data",
                "v": "{\"entity_id\":\"binary_sensor.doorbell_front_door\",\"old_state\":{\"entity_id\":\"binary_sensor.doorbell_front_door\",\"state\":\"off\",\"attributes\":{\"last_tripped_time\":\"2022-03-10T19:01:53.613000+00:00\",\"attribution\":\"Powered by UniFi Protect Server\",\"device_class\":\"occupancy\",\"icon\":\"mdi:doorbell-video\",\"friendly_name\":\"Front Door Doorbell\"},\"last_changed\":\"2022-03-10T19:01:57.575567+00:00\",\"last_updated\":\"2022-03-10T19:01:57.575567+00:00\",\"context\":{\"id\":\"ed1e78f36e6732310a53a988a3bf5573\",\"parent_id\":null,\"user_id\":null},\"original_state\":\"off\"},\"new_state\":{\"entity_id\":\"binary_sensor.doorbell_front_door\",\"state\":\"on\",\"attributes\":{\"last_tripped_time\":\"2022-03-10T19:17:50.455000+00:00\",\"attribution\":\"Powered by UniFi Protect Server\",\"device_class\":\"occupancy\",\"icon\":\"mdi:doorbell-video\",\"friendly_name\":\"Front Door Doorbell\"},\"last_changed\":\"2022-03-10T19:17:50.509564+00:00\",\"last_updated\":\"2022-03-10T19:17:50.509564+00:00\",\"context\":{\"id\":\"dcda339d60e8dc5d2a13e0eb9837de44\",\"parent_id\":null,\"user_id\":null},\"original_state\":\"on\",\"timeSinceChangedMs\":4}}",
                "vt": "json"
            },
            {
                "p": "do_notify",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "binary_sensor.doorbell_front_door",
        "payload": "on",
        "payloadType": "str",
        "x": 90,
        "y": 380,
        "wires": [
            [
                "117ffffa.58b3a8"
            ]
        ]
    },
    {
        "id": "bea87f39.bb9c18",
        "type": "debug",
        "z": "6c71644f.90490c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 420,
        "wires": []
    },
    {
        "id": "ac4bc382.ee2b48",
        "type": "config",
        "z": "6c71644f.90490c",
        "name": "",
        "properties": [
            {
                "p": "s3",
                "pt": "flow",
                "to": "{     \"bucket\": \"blalor-imgs\",     \"prefix\": \"hass-notif-imgs/\" }",
                "tot": "json"
            },
            {
                "p": "media_root",
                "pt": "flow",
                "to": "/media/node-red/",
                "tot": "str"
            }
        ],
        "active": true,
        "x": 90,
        "y": 20,
        "wires": []
    },
    {
        "id": "17801fb8.a006b8",
        "type": "debug",
        "z": "6c71644f.90490c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 40,
        "wires": []
    },
    {
        "id": "117ffffa.58b3a8",
        "type": "fan",
        "z": "6c71644f.90490c",
        "name": "",
        "x": 270,
        "y": 400,
        "wires": [
            [
                "bea87f39.bb9c18",
                "3296c10a.9b412e"
            ]
        ]
    },
    {
        "id": "6c3be341.3c355c",
        "type": "file",
        "z": "6c71644f.90490c",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1480,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a1c6a8a6.870ca",
        "type": "change",
        "z": "6c71644f.90490c",
        "name": "timestamped filename",
        "rules": [
            {
                "t": "set",
                "p": "old_filename",
                "pt": "msg",
                "to": "$flowContext(\"media_root\")\t    & snapshot_type\t    & \"_snapshot_\" \t    & $now(\"[Y0001]-[M01]-[D01]T[H01]_[m01]_[s01]Z\") \t    & \"_\"\t    & $split(camera_entity_id, \".\")[1]\t    & \".jpg\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$flowContext(\"media_root\")\t    & \"by_entity/\"\t    & camera_entity_id & \"/\"\t    & $now(\"[Y0001]-[M01]-[D01]T[H01]_[m01]_[s01]Z\")\t    & \"-\"\t    & snapshot_type\t    & \".jpg\"\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 160,
        "wires": [
            [
                "6c3be341.3c355c"
            ]
        ]
    },
    {
        "id": "2beff0bd2c5053cc",
        "type": "image",
        "z": "6c71644f.90490c",
        "name": "preview",
        "width": "240",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": true,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1240,
        "y": 280,
        "wires": []
    },
    {
        "id": "636b01dcb9becc4e",
        "type": "file",
        "z": "6c71644f.90490c",
        "name": "write motion notifs",
        "filename": "/media/node-red/motion-notifs.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 2390,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "182c79de78648a0c",
        "type": "function",
        "z": "6c71644f.90490c",
        "name": "",
        "func": "\nreturn {payload: msg};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 80,
        "wires": [
            [
                "636b01dcb9becc4e"
            ]
        ]
    },
    {
        "id": "3d18bde5f3ad58c3",
        "type": "server-state-changed",
        "z": "6c71644f.90490c",
        "name": "doorbell rang 🚨",
        "server": "1fb2958d.14f89a",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "binary_sensor.doorbell_front_door",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "do_notify",
                "propertyType": "msg",
                "value": "true",
                "valueType": "bool"
            },
            {
                "property": "camera_entity_id",
                "propertyType": "msg",
                "value": "camera.front_door",
                "valueType": "str"
            },
            {
                "property": "is_critical",
                "propertyType": "msg",
                "value": "1",
                "valueType": "num"
            },
            {
                "property": "snapshot_type",
                "propertyType": "msg",
                "value": "doorbell",
                "valueType": "str"
            },
            {
                "property": "message",
                "propertyType": "msg",
                "value": "🔔 someone's at the door",
                "valueType": "str"
            }
        ],
        "x": 100,
        "y": 420,
        "wires": [
            [
                "117ffffa.58b3a8"
            ],
            []
        ]
    },
    {
        "id": "303272f69e6b0348",
        "type": "catch",
        "z": "6c71644f.90490c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 720,
        "wires": [
            [
                "21e7fe0c0ceaf0da"
            ]
        ]
    },
    {
        "id": "21e7fe0c0ceaf0da",
        "type": "debug",
        "z": "6c71644f.90490c",
        "name": "motion notifs exceptions",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 720,
        "wires": []
    },
    {
        "id": "ec749bf69cfdb677",
        "type": "switch",
        "z": "6c71644f.90490c",
        "name": "notify?",
        "property": "do_notify",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1230,
        "y": 100,
        "wires": [
            [
                "d0bbf291b1ba2fd0"
            ]
        ]
    },
    {
        "id": "b0839e1fe1b83e43",
        "type": "change",
        "z": "6c71644f.90490c",
        "name": "last-motion filename",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$flowContext(\"media_root\")\t  & \"last-motion_\"\t  & camera_entity_id\t  & \".jpg\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 220,
        "wires": [
            [
                "0667603d32b62acd"
            ]
        ]
    },
    {
        "id": "0667603d32b62acd",
        "type": "file",
        "z": "6c71644f.90490c",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1480,
        "y": 240,
        "wires": [
            [
                "0643ad3a26e2bbf7"
            ]
        ]
    },
    {
        "id": "d0bbf291b1ba2fd0",
        "type": "trigger",
        "z": "6c71644f.90490c",
        "name": "once/5m",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "topic",
        "topic": "topic",
        "outputs": 1,
        "x": 1400,
        "y": 100,
        "wires": [
            [
                "cdcd22b2.55961"
            ]
        ]
    },
    {
        "id": "0643ad3a26e2bbf7",
        "type": "api-call-service",
        "z": "6c71644f.90490c",
        "name": "kick camera",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "local_file",
        "service": "update_file_path",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t    \"entity_id\": camera_entity_id & \"_last_motion\",\t    \"file_path\": filename\t}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1650,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "79d7c6e97440989d",
        "type": "server-state-changed",
        "z": "6c71644f.90490c",
        "name": "garage door",
        "server": "1fb2958d.14f89a",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "cover.garage_door",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "jsonata",
        "halt_if_compare": "jsonata",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 150,
        "y": 580,
        "wires": [
            [
                "010067f12a77e6de"
            ]
        ]
    },
    {
        "id": "010067f12a77e6de",
        "type": "switch",
        "z": "6c71644f.90490c",
        "name": "",
        "property": "data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "data.old_state.state = \"closed\" and data.new_state.state = \"opening\"",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 580,
        "wires": [
            [
                "7683a618852a519a",
                "32fc49940dd1f34c",
                "1283a79b02eeef99"
            ]
        ]
    },
    {
        "id": "32fc49940dd1f34c",
        "type": "debug",
        "z": "6c71644f.90490c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 520,
        "wires": []
    },
    {
        "id": "d497395d8289a03e",
        "type": "inject",
        "z": "6c71644f.90490c",
        "name": "opening",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "data",
                "v": "{\"entity_id\":\"cover.garage_door\",\"old_state\":{\"state\":\"closed\"},\"new_state\":{\"state\":\"opening\"}}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "opening",
        "payloadType": "str",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "010067f12a77e6de"
            ]
        ]
    },
    {
        "id": "7683a618852a519a",
        "type": "ha-api",
        "z": "6c71644f.90490c",
        "name": "garage camera",
        "server": "1fb2958d.14f89a",
        "version": 1,
        "debugenabled": false,
        "protocol": "http",
        "method": "get",
        "path": "camera_proxy/camera.garage_dcs_930l",
        "data": "{}",
        "dataType": "jsonata",
        "responseType": "arraybuffer",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 560,
        "y": 580,
        "wires": [
            [
                "b515a12177fda28e"
            ]
        ]
    },
    {
        "id": "b515a12177fda28e",
        "type": "image",
        "z": "6c71644f.90490c",
        "name": "preview",
        "width": "240",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": true,
        "active": false,
        "pass": false,
        "outputs": 0,
        "x": 760,
        "y": 540,
        "wires": []
    },
    {
        "id": "1283a79b02eeef99",
        "type": "ha-api",
        "z": "6c71644f.90490c",
        "name": "garage/alley camera",
        "server": "1fb2958d.14f89a",
        "version": 1,
        "debugenabled": false,
        "protocol": "http",
        "method": "get",
        "path": "camera_proxy/camera.garage_alley",
        "data": "{}",
        "dataType": "jsonata",
        "responseType": "arraybuffer",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 580,
        "y": 640,
        "wires": [
            [
                "fe7c94759964f839"
            ]
        ]
    },
    {
        "id": "fe7c94759964f839",
        "type": "image",
        "z": "6c71644f.90490c",
        "name": "preview",
        "width": "240",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": true,
        "active": false,
        "pass": false,
        "outputs": 0,
        "x": 760,
        "y": 680,
        "wires": []
    },
    {
        "id": "d9eab5cea1d98202",
        "type": "server-state-changed",
        "z": "6c71644f.90490c",
        "name": "object detected: front door ⚠️",
        "server": "1fb2958d.14f89a",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "sensor.front_door_detected_object",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "none",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "do_notify",
                "propertyType": "msg",
                "value": "true",
                "valueType": "bool"
            },
            {
                "property": "camera_entity_id",
                "propertyType": "msg",
                "value": "camera.front_door",
                "valueType": "str"
            },
            {
                "property": "is_critical",
                "propertyType": "msg",
                "value": "0",
                "valueType": "num"
            },
            {
                "property": "snapshot_type",
                "propertyType": "msg",
                "value": "object",
                "valueType": "str"
            }
        ],
        "x": 150,
        "y": 320,
        "wires": [
            [
                "59d85c66c88dc05b"
            ],
            []
        ]
    },
    {
        "id": "59d85c66c88dc05b",
        "type": "change",
        "z": "6c71644f.90490c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "msg",
                "to": "$substringBefore($substringAfter(topic, \"sensor.\"), \"_detected_object\")\t& \" detected \"\t& payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 280,
        "wires": [
            [
                "3296c10a.9b412e"
            ]
        ]
    },
    {
        "id": "7b41b747.6cb21",
        "type": "http request",
        "z": "8e4e09de.5dedc8",
        "d": true,
        "name": "skyaware978",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://alarmpi.home.local/skyaware978/data/aircraft.json",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 250,
        "y": 140,
        "wires": [
            [
                "26ea157d.c6467a"
            ]
        ]
    },
    {
        "id": "ffb0c10.246174",
        "type": "http request",
        "z": "8e4e09de.5dedc8",
        "name": "dump1090",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://alarmpi.home.local/dump1090/data/aircraft.json",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 250,
        "y": 180,
        "wires": [
            [
                "59639fc1.9c4b48"
            ]
        ]
    },
    {
        "id": "afd05963.8a9948",
        "type": "inject",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "7b41b747.6cb21",
                "c627fd2db5e2d20b"
            ]
        ]
    },
    {
        "id": "acf0ce6e.b3793",
        "type": "ha-entity",
        "z": "8e4e09de.5dedc8",
        "name": "aircraft_978",
        "server": "1fb2958d.14f89a",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "aircraft_978"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "count"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "$count(payload.aircraft)",
        "stateType": "jsonata",
        "attributes": [
            {
                "property": "now",
                "value": "payload.now",
                "valueType": "msg"
            },
            {
                "property": "messages",
                "value": "payload.messages",
                "valueType": "msg"
            }
        ],
        "resend": true,
        "outputLocation": "",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 610,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "deae8479.c40408",
        "type": "ha-entity",
        "z": "8e4e09de.5dedc8",
        "name": "aircraft_1090",
        "server": "1fb2958d.14f89a",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "aircraft_1090"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "count"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "$count(payload.aircraft)",
        "stateType": "jsonata",
        "attributes": [
            {
                "property": "now",
                "value": "payload.now",
                "valueType": "msg"
            },
            {
                "property": "messages",
                "value": "payload.messages",
                "valueType": "msg"
            }
        ],
        "resend": true,
        "outputLocation": "",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 610,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "5394059f.b5361c",
        "type": "function",
        "z": "8e4e09de.5dedc8",
        "name": "Split array into individual planes",
        "func": "var m = [];\nfor (var i in msg.payload.aircraft) {\n    m.push({\n        payload: msg.payload.aircraft[i],\n        timestamp: msg.timestamp,\n        source: msg.source,\n    });\n}\nreturn [m];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 180,
        "wires": [
            [
                "5e7a4a2b.fa27e4",
                "d8476fc2.2f007"
            ]
        ]
    },
    {
        "id": "2ae90fc7.b57198",
        "type": "change",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.name",
                "pt": "msg",
                "to": "payload.hex & \" \" & payload.flight",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.icon",
                "pt": "msg",
                "to": "plane",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.layer",
                "pt": "msg",
                "to": "ADSB",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "payload.flight & \" \" & payload.alt",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.speed",
                "pt": "msg",
                "to": "payload.gs",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.alt",
                "pt": "msg",
                "to": "payload.alt_geom / 3.2808",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.iconColor",
                "pt": "msg",
                "to": "source = \"dump1090\" ? \"blue\" : \"green\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.bearing",
                "pt": "msg",
                "to": "payload.track",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 220,
        "wires": [
            [
                "9694aa93.4bf0c8",
                "4c0fd75f.339948",
                "ea89cfa8.14cd6"
            ]
        ]
    },
    {
        "id": "a322656d.2b5a88",
        "type": "worldmap",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "lat": "37.5731",
        "lon": "-77.4899",
        "zoom": "",
        "layer": "OSMG",
        "cluster": "0",
        "maxage": "90",
        "panit": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "true",
        "path": "",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OpTop,SW",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 2010,
        "y": 180,
        "wires": []
    },
    {
        "id": "5e7a4a2b.fa27e4",
        "type": "debug",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 140,
        "wires": []
    },
    {
        "id": "9694aa93.4bf0c8",
        "type": "debug",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 220,
        "wires": []
    },
    {
        "id": "d8476fc2.2f007",
        "type": "switch",
        "z": "8e4e09de.5dedc8",
        "name": "has position",
        "property": "payload.lat and payload.lon",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "2ae90fc7.b57198"
            ]
        ]
    },
    {
        "id": "4c0fd75f.339948",
        "type": "function",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "func": "/*\nIf msg.payload is an array containing two objects,\nthe first object will be written as the set of named fields,\nthe second is the set of named tags.\n*/\np = msg.payload;\n\nfields = {\n    lat: p.lat,\n    lon: p.lon,\n    rssi: p.rssi,\n    time: Math.round((msg.timestamp - p.seen_pos) * 1000), // ugh\n};\n\nif (p.alt_baro) {\n    fields.alt_baro = p.alt_baro;\n}\n    \nif (p.alt_geom) {\n    fields.alt_geom = p.alt_geom;\n}\n\nif (p.gs) {\n    fields.gs = p.gs;\n}\n\n\ntags = {\n    hex: p.hex,\n    source: msg.source,\n};\n\nif (p.squawk) {\n    tags.squawk = p.squawk;\n}\n\nif (p.emergency) {\n    tags.emergency = p.emergency;\n}\n\nif (p.flight) {\n    tags.flight = p.flight;\n}\n\nif (p.category) {\n    tags.category = p.category;\n}\n\nmsg = {\n    payload: [\n        // fields\n        fields,\n    \n        // tags\n        tags,\n]};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "26ea157d.c6467a",
        "type": "change",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "source",
                "pt": "msg",
                "to": "skyaware978",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "payload.now",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 140,
        "wires": [
            [
                "acf0ce6e.b3793",
                "ae0edcc6.900b6"
            ]
        ]
    },
    {
        "id": "59639fc1.9c4b48",
        "type": "change",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "source",
                "pt": "msg",
                "to": "dump1090",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "payload.now",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "deae8479.c40408",
                "ae0edcc6.900b6"
            ]
        ]
    },
    {
        "id": "e3fd6b99.b748f8",
        "type": "debug",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "ae0edcc6.900b6",
        "type": "fan",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "x": 610,
        "y": 160,
        "wires": [
            [
                "5394059f.b5361c",
                "e3fd6b99.b748f8"
            ]
        ]
    },
    {
        "id": "4c2eab3e.8298d4",
        "type": "api-call-service",
        "z": "8e4e09de.5dedc8",
        "name": "in-hass notification",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "notify",
        "service": "persistent_notification",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t    \"title\": \"low-flyer \" & payload.hex & \" \" & payload.flight,\t    \"message\": \"passing over \" & payload.lat & \",\" & payload.lon & \" moving \" & payload.gs & \"kts at \" & payload.alt_geom & \"' ASL, at \" & $fromMillis(timestamp * 1000)\t}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2110,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "4dccd86e.1676c8",
        "type": "trigger",
        "z": "8e4e09de.5dedc8",
        "name": "once/5m",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1920,
        "y": 40,
        "wires": [
            [
                "4c2eab3e.8298d4"
            ]
        ]
    },
    {
        "id": "431cbf62.65f4d",
        "type": "file",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "filename": "/tmp/filtered_flights.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1970,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c2b9da92.e5727",
        "type": "inject",
        "z": "8e4e09de.5dedc8",
        "name": "reset",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1730,
        "y": 40,
        "wires": [
            [
                "4dccd86e.1676c8"
            ]
        ]
    },
    {
        "id": "18f6e019.e068d8",
        "type": "inject",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "timestamp",
                "v": "$toMillis($now())/1000\t",
                "vt": "jsonata"
            },
            {
                "p": "source",
                "v": "dump1090",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"hex\":\"a6a425\",\"flight\":\"NKS930  \",\"alt_baro\":1500,\"alt_geom\":1675,\"gs\":169.8,\"baro_rate\":-1280,\"category\":\"A3\",\"nav_qnh\":1019.2,\"nav_altitude_mcp\":1696,\"nav_heading\":87.2,\"lat\":37.57395400685966,\"lon\":-77.48991018535888,\"nic\":8,\"rc\":186,\"seen_pos\":11.3,\"version\":2,\"nic_baro\":1,\"nac_p\":10,\"nac_v\":4,\"sil\":3,\"sil_type\":\"perhour\",\"gva\":2,\"sda\":2,\"mlat\":[],\"tisb\":[],\"messages\":1034,\"seen\":4.2,\"rssi\":-12.4,\"name\":\"a6a425 NKS930  \",\"heading\":145.6,\"bearing\":145.6,\"icon\":\"plane\",\"layer\":\"ADSB\",\"alt\":510.54,\"label\":\"NKS930   510.54\",\"speed\":169.8}",
        "payloadType": "json",
        "x": 1330,
        "y": 140,
        "wires": [
            [
                "ea89cfa8.14cd6"
            ]
        ]
    },
    {
        "id": "6d9a477f.c171c",
        "type": "debug",
        "z": "8e4e09de.5dedc8",
        "name": "inside fence",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 80,
        "wires": []
    },
    {
        "id": "ed1ccafd.cbb06",
        "type": "worldmap-tracks",
        "z": "8e4e09de.5dedc8",
        "d": true,
        "name": "",
        "depth": "100",
        "layer": "combined",
        "smooth": false,
        "x": 1710,
        "y": 220,
        "wires": [
            [
                "d89e05bd.b9b6a8"
            ]
        ]
    },
    {
        "id": "22785560.825c72",
        "type": "inject",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1140,
        "y": 40,
        "wires": [
            [
                "fcf1ed10.a77dc"
            ]
        ]
    },
    {
        "id": "fcf1ed10.a77dc",
        "type": "function",
        "z": "8e4e09de.5dedc8",
        "name": "inject filtered_flights",
        "func": "async function processLineByLine() {\n  const fileStream = fs.createReadStream('/tmp/filtered_flights.json');\n\n  const rl = readline.createInterface({\n    input: fileStream,\n    crlfDelay: Infinity\n  });\n  // Note: we use the crlfDelay option to recognize all instances of CR LF\n  // ('\\r\\n') in input.txt as a single line break.\n\n  for await (const line of rl) {\n    node.send({ payload: JSON.parse(line) });\n  }\n}\n\nprocessLineByLine();\nnode.done();\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "readline",
                "module": "readline"
            }
        ],
        "x": 1280,
        "y": 100,
        "wires": [
            [
                "ea89cfa8.14cd6"
            ]
        ]
    },
    {
        "id": "bb59003c.d7ac68",
        "type": "geofence",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "mode": "circle",
        "inside": "true",
        "rad": 702.217078047325,
        "points": [],
        "centre": {
            "latitude": 37.57395400685966,
            "longitude": -77.48991018535888
        },
        "floor": "",
        "ceiling": "762",
        "worldmap": true,
        "outputs": 2,
        "x": 1720,
        "y": 100,
        "wires": [
            [
                "4dccd86e.1676c8",
                "431cbf62.65f4d",
                "6d9a477f.c171c"
            ],
            [
                "a322656d.2b5a88"
            ]
        ]
    },
    {
        "id": "a79aa51e.72e288",
        "type": "worldmap in",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "path": "/worldmap",
        "events": "connect",
        "x": 1360,
        "y": 40,
        "wires": [
            [
                "edc90c9c.19a7a"
            ]
        ]
    },
    {
        "id": "edc90c9c.19a7a",
        "type": "change",
        "z": "8e4e09de.5dedc8",
        "name": "action: send",
        "rules": [
            {
                "t": "set",
                "p": "payload.action",
                "pt": "msg",
                "to": "send",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1530,
        "y": 40,
        "wires": [
            [
                "bb59003c.d7ac68"
            ]
        ]
    },
    {
        "id": "ea89cfa8.14cd6",
        "type": "fan",
        "z": "8e4e09de.5dedc8",
        "name": "all flights",
        "x": 1540,
        "y": 160,
        "wires": [
            [
                "bb59003c.d7ac68",
                "ed1ccafd.cbb06",
                "a322656d.2b5a88"
            ]
        ]
    },
    {
        "id": "d89e05bd.b9b6a8",
        "type": "change",
        "z": "8e4e09de.5dedc8",
        "name": "format track",
        "rules": [
            {
                "t": "set",
                "p": "payload.color",
                "pt": "msg",
                "to": "#c291e0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.dashArray",
                "pt": "msg",
                "to": "[5,10]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1850,
        "y": 220,
        "wires": [
            [
                "a322656d.2b5a88"
            ]
        ]
    },
    {
        "id": "41494bcf98d352af",
        "type": "catch",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 380,
        "wires": [
            [
                "a9c2d2835d15f038"
            ]
        ]
    },
    {
        "id": "a9c2d2835d15f038",
        "type": "debug",
        "z": "8e4e09de.5dedc8",
        "name": "skyaware exceptions",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 380,
        "wires": []
    },
    {
        "id": "14048411da07c7d8",
        "type": "server-events",
        "z": "8e4e09de.5dedc8",
        "name": "",
        "server": "1fb2958d.14f89a",
        "version": 1,
        "event_type": "home_assistant_client",
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "waitForRunning": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "$outputData(\"eventData\").event_type",
                "valueType": "jsonata"
            }
        ],
        "x": 140,
        "y": 480,
        "wires": [
            [
                "6e102c5cb0c73b69"
            ]
        ]
    },
    {
        "id": "6e102c5cb0c73b69",
        "type": "function",
        "z": "8e4e09de.5dedc8",
        "name": "track connection state",
        "func": "flow.set(\"ha_ready\", msg.payload == \"ready\");\n\nvar status_msg = msg.payload + \" → \" + flow.get(\"ha_ready\");\n\nnode.log(status_msg);\nnode.status({text: status_msg, shape: \"dot\", fill: \"blue\"});\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nnode.status({text: \"🚫✉️ → \" + flow.get(\"ha_ready\"), shape: \"dot\", fill: \"yellow\"});\n",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 480,
        "wires": [],
        "info": "The documentation for the events node implies `running` is the final/stable event, but I'm seeing `ready`, so that's what we're tracking."
    },
    {
        "id": "c627fd2db5e2d20b",
        "type": "switch",
        "z": "8e4e09de.5dedc8",
        "name": "ha ready?",
        "property": "ha_ready",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 100,
        "y": 120,
        "wires": [
            [
                "7b41b747.6cb21",
                "ffb0c10.246174"
            ]
        ]
    },
    {
        "id": "d03ccd3532098c2a",
        "type": "moonNode-monitor",
        "z": "efaed6095d445392",
        "d": true,
        "name": "Voron v0 Monitor",
        "server": "61afaa8ff2a47189",
        "autoStart": true,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "711dc6baecd5a933",
                "32f480e13828bbd9",
                "9b78542498788cc1",
                "6cad3d89858a64db",
                "d7fdaab3c08e636d",
                "a9944d52da5ff028",
                "0d5754d885fed0bb",
                "c5ae9430a0088677",
                "ee4fd193dd6d60c9",
                "908b4ccd341163bc"
            ],
            [
                "89836447e1b31f95"
            ]
        ]
    },
    {
        "id": "89836447e1b31f95",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 240,
        "wires": []
    },
    {
        "id": "711dc6baecd5a933",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "32f480e13828bbd9",
        "type": "moonNode-event",
        "z": "efaed6095d445392",
        "name": "hotend actual",
        "interval": "5",
        "delta": "1",
        "modelPath": "extruder.temperature",
        "outputs": 1,
        "x": 480,
        "y": 160,
        "wires": [
            [
                "f9a1347c1ad83467",
                "fcb106c5dc394309"
            ]
        ]
    },
    {
        "id": "f9a1347c1ad83467",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 160,
        "wires": []
    },
    {
        "id": "9b78542498788cc1",
        "type": "moonNode-event",
        "z": "efaed6095d445392",
        "name": "hotend target",
        "interval": "5",
        "delta": "1",
        "modelPath": "extruder.target",
        "outputs": 1,
        "x": 480,
        "y": 200,
        "wires": [
            [
                "b9345a2a19536c8c"
            ]
        ]
    },
    {
        "id": "6cad3d89858a64db",
        "type": "moonNode-event",
        "z": "efaed6095d445392",
        "name": "bed actual",
        "interval": "5",
        "delta": "1",
        "modelPath": "heater_bed.temperature",
        "outputs": 1,
        "x": 470,
        "y": 240,
        "wires": [
            [
                "cdfed49fc12cf5e4"
            ]
        ]
    },
    {
        "id": "d7fdaab3c08e636d",
        "type": "moonNode-event",
        "z": "efaed6095d445392",
        "name": "bed target",
        "interval": "5",
        "delta": "1",
        "modelPath": "heater_bed.target",
        "outputs": 1,
        "x": 470,
        "y": 280,
        "wires": [
            [
                "e7728edecf2f8ded"
            ]
        ]
    },
    {
        "id": "a9944d52da5ff028",
        "type": "moonNode-event",
        "z": "efaed6095d445392",
        "name": "state",
        "interval": "0",
        "delta": "0",
        "modelPath": "print_stats.state",
        "outputs": 1,
        "x": 450,
        "y": 320,
        "wires": [
            [
                "2823aaca31d4e3e0"
            ]
        ]
    },
    {
        "id": "0d5754d885fed0bb",
        "type": "moonNode-event",
        "z": "efaed6095d445392",
        "name": "filename",
        "interval": "0",
        "delta": "0",
        "modelPath": "print_stats.filename",
        "outputs": 1,
        "x": 460,
        "y": 360,
        "wires": [
            [
                "a2dfb939869f7602"
            ]
        ]
    },
    {
        "id": "c5ae9430a0088677",
        "type": "moonNode-event",
        "z": "efaed6095d445392",
        "name": "progress",
        "interval": "5",
        "delta": "0.1",
        "modelPath": "display_status.progress",
        "outputs": 1,
        "x": 460,
        "y": 400,
        "wires": [
            [
                "40f91007597bbcbb"
            ]
        ]
    },
    {
        "id": "7c55299f969d2a93",
        "type": "moonNode-event",
        "z": "efaed6095d445392",
        "name": "duration",
        "interval": "1",
        "delta": "1",
        "modelPath": "print_stats.total_duration",
        "outputs": 1,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "1784f2f34d2183a8"
            ]
        ]
    },
    {
        "id": "b9345a2a19536c8c",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 200,
        "wires": []
    },
    {
        "id": "cdfed49fc12cf5e4",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 240,
        "wires": []
    },
    {
        "id": "e7728edecf2f8ded",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "2823aaca31d4e3e0",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "a2dfb939869f7602",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 360,
        "wires": []
    },
    {
        "id": "40f91007597bbcbb",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 400,
        "wires": []
    },
    {
        "id": "1784f2f34d2183a8",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 440,
        "wires": []
    },
    {
        "id": "fcb106c5dc394309",
        "type": "ha-entity",
        "z": "efaed6095d445392",
        "name": "hotend actual",
        "server": "1fb2958d.14f89a",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "NR: v0 Hotend Actual"
            },
            {
                "property": "device_class",
                "value": "temperature"
            },
            {
                "property": "icon",
                "value": "mdi:printer-3d-nozzle-heat"
            },
            {
                "property": "unit_of_measurement",
                "value": "°C"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "moonNode.eventValue",
        "stateType": "msg",
        "attributes": [],
        "resend": true,
        "outputLocation": "",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 800,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7b9efd3f69431bf6",
        "type": "moonNode-command",
        "z": "efaed6095d445392",
        "name": "",
        "command": "server.info",
        "server": "61afaa8ff2a47189",
        "stateless": false,
        "x": 390,
        "y": 540,
        "wires": [
            [
                "2c5ce3a3020b8a7c"
            ],
            [
                "cdcad3fa3ddd7fdb"
            ],
            [
                "c0539f070dae4bc0"
            ]
        ]
    },
    {
        "id": "2c5ce3a3020b8a7c",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 520,
        "wires": []
    },
    {
        "id": "cdcad3fa3ddd7fdb",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 560,
        "wires": []
    },
    {
        "id": "c0539f070dae4bc0",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 600,
        "wires": []
    },
    {
        "id": "2e82cae2e8fb5809",
        "type": "inject",
        "z": "efaed6095d445392",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 520,
        "wires": [
            [
                "7b9efd3f69431bf6"
            ]
        ]
    },
    {
        "id": "7108e9cfe179ea3e",
        "type": "ha-entity",
        "z": "efaed6095d445392",
        "name": "",
        "server": "1fb2958d.14f89a",
        "version": 2,
        "debugenabled": false,
        "outputs": 2,
        "entityType": "switch",
        "config": [
            {
                "property": "name",
                "value": "v0_whatsit"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:robot"
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": true,
        "outputPayload": "$entity()",
        "outputPayloadType": "jsonata",
        "x": 200,
        "y": 640,
        "wires": [
            [
                "0bac30fcd4c6e048"
            ],
            [
                "9aea15017cc3ef8b"
            ]
        ]
    },
    {
        "id": "0bac30fcd4c6e048",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 600,
        "wires": []
    },
    {
        "id": "9aea15017cc3ef8b",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 660,
        "wires": []
    },
    {
        "id": "ee4fd193dd6d60c9",
        "type": "moonNode-event",
        "z": "efaed6095d445392",
        "name": "HEAT_SOAK",
        "interval": "1",
        "delta": "1",
        "modelPath": "[\"gcode_macro-HEAT_SOAK\"]",
        "outputs": 1,
        "x": 470,
        "y": 480,
        "wires": [
            [
                "02d50255e979b4df"
            ]
        ]
    },
    {
        "id": "02d50255e979b4df",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 480,
        "wires": []
    },
    {
        "id": "908b4ccd341163bc",
        "type": "ha-entity",
        "z": "efaed6095d445392",
        "name": "heat soak stage",
        "server": "1fb2958d.14f89a",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "v0_heat_soak_stage"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "payload.fullModel[\"gcode_macro HEAT_SOAK\"].stage",
        "stateType": "msg",
        "attributes": [
            {
                "property": "elapsed",
                "value": "payload.fullModel[\"gcode_macro HEAT_SOAK\"].total_time_elapsed",
                "valueType": "msg"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 800,
        "y": 40,
        "wires": [
            [
                "74a1ecf63eda9c75"
            ]
        ]
    },
    {
        "id": "74a1ecf63eda9c75",
        "type": "debug",
        "z": "efaed6095d445392",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 40,
        "wires": []
    },
    {
        "id": "92177d0f19a1753c",
        "type": "moonNode-monitor",
        "z": "6f1ebe1822580f11",
        "name": "vcore3",
        "server": "63a02432e8112030",
        "autoStart": true,
        "mObjSel": [
            "print_stats",
            "display_status",
            "gcode_macro HEAT_SOAK",
            "extruder"
        ],
        "mObjList": "{\"objects\":[{\"object\":\"webhooks\",\"selected\":false},{\"object\":\"configfile\",\"selected\":false},{\"object\":\"mcu\",\"selected\":false},{\"object\":\"heaters\",\"selected\":false},{\"object\":\"temperature_sensor Octopus\",\"selected\":false},{\"object\":\"idle_timeout\",\"selected\":false},{\"object\":\"temperature_host raspberry_pi\",\"selected\":false},{\"object\":\"temperature_sensor raspberry_pi\",\"selected\":false},{\"object\":\"gcode_move\",\"selected\":false},{\"object\":\"print_stats\",\"selected\":false},{\"object\":\"virtual_sdcard\",\"selected\":false},{\"object\":\"display_status\",\"selected\":false},{\"object\":\"pause_resume\",\"selected\":false},{\"object\":\"heater_bed\",\"selected\":false},{\"object\":\"fan\",\"selected\":false},{\"object\":\"heater_fan toolhead_cooling_fan\",\"selected\":false},{\"object\":\"controller_fan controller_fan\",\"selected\":false},{\"object\":\"bed_mesh\",\"selected\":false},{\"object\":\"z_tilt\",\"selected\":false},{\"object\":\"tmc2209 stepper_x\",\"selected\":false},{\"object\":\"tmc2209 stepper_y\",\"selected\":false},{\"object\":\"tmc2209 extruder\",\"selected\":false},{\"object\":\"tmc2209 stepper_z\",\"selected\":false},{\"object\":\"tmc2209 stepper_z1\",\"selected\":false},{\"object\":\"tmc2209 stepper_z2\",\"selected\":false},{\"object\":\"gcode_macro EuclidProbe\",\"selected\":false},{\"object\":\"probe\",\"selected\":false},{\"object\":\"gcode_macro _ASSERT_PROBE_STATE\",\"selected\":false},{\"object\":\"gcode_macro ASSERT_PROBE_DEPLOYED\",\"selected\":false},{\"object\":\"gcode_macro ASSERT_PROBE_STOWED\",\"selected\":false},{\"object\":\"gcode_macro EUCLID_PROBE_BEGIN_BATCH\",\"selected\":false},{\"object\":\"gcode_macro EUCLID_PROBE_END_BATCH\",\"selected\":false},{\"object\":\"gcode_macro DEPLOY_PROBE\",\"selected\":false},{\"object\":\"gcode_macro STOW_PROBE\",\"selected\":false},{\"object\":\"gcode_macro BED_MESH_CALIBRATE\",\"selected\":false},{\"object\":\"gcode_macro Z_TILT_ADJUST\",\"selected\":false},{\"object\":\"gcode_macro PROBE_CALIBRATE\",\"selected\":false},{\"object\":\"firmware_retraction\",\"selected\":false},{\"object\":\"gcode_macro _REPORT_POSITION\",\"selected\":false},{\"object\":\"gcode_macro CENTER\",\"selected\":false},{\"object\":\"gcode_macro LAZY_HOME\",\"selected\":false},{\"object\":\"gcode_macro RESET_VELOCITY\",\"selected\":false},{\"object\":\"gcode_macro SEARCH_VARS\",\"selected\":false},{\"object\":\"gcode_macro FIRST_LAYER_CALIBRATION\",\"selected\":false},{\"object\":\"gcode_macro _SET_FAN_SPEED\",\"selected\":false},{\"object\":\"gcode_macro _RUNOUT_INFO\",\"selected\":false},{\"object\":\"gcode_macro M115\",\"selected\":false},{\"object\":\"gcode_macro M117\",\"selected\":false},{\"object\":\"gcode_macro HEAT_SOAK\",\"selected\":false},{\"object\":\"gcode_macro CANCEL_HEAT_SOAK\",\"selected\":false},{\"object\":\"gcode_macro PROBE_ACCURACY_EVERYWHERE\",\"selected\":false},{\"object\":\"gcode_macro USE_INFILL_SQV\",\"selected\":false},{\"object\":\"gcode_macro SET_INFILL_SQV\",\"selected\":false},{\"object\":\"gcode_macro USE_NORMAL_SQV\",\"selected\":false},{\"object\":\"gcode_macro RatOS\",\"selected\":false},{\"object\":\"gcode_macro PAUSE\",\"selected\":false},{\"object\":\"gcode_macro RESUME\",\"selected\":false},{\"object\":\"gcode_macro CANCEL_PRINT\",\"selected\":false},{\"object\":\"gcode_macro PRIME_LINE\",\"selected\":false},{\"object\":\"gcode_macro _PARK\",\"selected\":false},{\"object\":\"gcode_macro M600\",\"selected\":false},{\"object\":\"gcode_macro UNLOAD_FILAMENT\",\"selected\":false},{\"object\":\"gcode_macro LOAD_FILAMENT\",\"selected\":false},{\"object\":\"gcode_macro START_PRINT\",\"selected\":false},{\"object\":\"gcode_macro END_PRINT\",\"selected\":false},{\"object\":\"gcode_macro GENERATE_SHAPER_GRAPHS\",\"selected\":false},{\"object\":\"gcode_macro COMPILE_FIRMARE\",\"selected\":false},{\"object\":\"gcode_macro CHANGE_HOSTNAME\",\"selected\":false},{\"object\":\"temperature_sensor chamber\",\"selected\":false},{\"object\":\"temperature_sensor motor_l\",\"selected\":false},{\"object\":\"filament_motion_sensor btt_sfs\",\"selected\":false},{\"object\":\"motion_report\",\"selected\":false},{\"object\":\"query_endstops\",\"selected\":false},{\"object\":\"system_stats\",\"selected\":false},{\"object\":\"toolhead\",\"selected\":false},{\"object\":\"extruder\",\"selected\":false}]}",
        "x": 410,
        "y": 340,
        "wires": [
            [
                "6002357c43d4d015",
                "de404bd93ca00f45",
                "b9ceaf4ed364a968",
                "dbd2c86c7dc30e49",
                "ff2c7434b0170cd9",
                "a6ecf7d4b94a946f"
            ],
            [
                "3a36ab22613b21f6"
            ]
        ]
    },
    {
        "id": "3a36ab22613b21f6",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "vcore3 conn msgs",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 420,
        "wires": []
    },
    {
        "id": "6002357c43d4d015",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 200,
        "wires": []
    },
    {
        "id": "de404bd93ca00f45",
        "type": "moonNode-event",
        "z": "6f1ebe1822580f11",
        "name": "hotend actual",
        "interval": "5",
        "delta": ".1",
        "modelPath": "extruder.temperature",
        "outputs": 1,
        "x": 860,
        "y": 140,
        "wires": [
            [
                "dfb1bca772564aa7",
                "b0f44afe54fc079e"
            ]
        ]
    },
    {
        "id": "dfb1bca772564aa7",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 100,
        "wires": []
    },
    {
        "id": "b9ceaf4ed364a968",
        "type": "moonNode-event",
        "z": "6f1ebe1822580f11",
        "name": "state",
        "interval": "0",
        "delta": "0",
        "modelPath": "print_stats.state",
        "outputs": 1,
        "x": 710,
        "y": 400,
        "wires": [
            [
                "f2f653c958a21271"
            ]
        ]
    },
    {
        "id": "b0f44afe54fc079e",
        "type": "ha-entity",
        "z": "6f1ebe1822580f11",
        "name": "hotend actual",
        "server": "1fb2958d.14f89a",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "NR: vcore3 Hotend Actual"
            },
            {
                "property": "device_class",
                "value": "temperature"
            },
            {
                "property": "icon",
                "value": "mdi:printer-3d-nozzle-heat"
            },
            {
                "property": "unit_of_measurement",
                "value": "°C"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "moonNode.eventValue",
        "stateType": "msg",
        "attributes": [],
        "resend": true,
        "outputLocation": "",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 1080,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f2f653c958a21271",
        "type": "switch",
        "z": "6f1ebe1822580f11",
        "name": "completes",
        "property": "payload.patchModel.print_stats.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "complete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 870,
        "y": 380,
        "wires": [
            [
                "2b4badb0172ab2fd",
                "329f345a7612eeb6",
                "359af246fd0890bb",
                "d197fe175399dd70"
            ]
        ]
    },
    {
        "id": "2b4badb0172ab2fd",
        "type": "ha-api",
        "z": "6f1ebe1822580f11",
        "d": true,
        "name": "get snapshot",
        "server": "1fb2958d.14f89a",
        "version": 1,
        "debugenabled": false,
        "protocol": "http",
        "method": "get",
        "path": "/api/camera_proxy/camera.v_core_3_enclosure",
        "data": "{}",
        "dataType": "json",
        "responseType": "arraybuffer",
        "outputProperties": [
            {
                "property": "snapshot",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 1070,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c35b0ab904483303",
        "type": "inject",
        "z": "6f1ebe1822580f11",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"fullModel\":{\"virtual_sdcard\":{\"progress\":1,\"file_position\":3511425,\"is_active\":false,\"file_path\":null,\"file_size\":3511425},\"pause_resume\":{\"is_paused\":false},\"display_status\":{\"progress\":1,\"message\":\"Done.\"},\"print_stats\":{\"print_duration\":3348.0411819490837,\"total_duration\":3769.900146160042,\"filament_used\":4041.6051200000047,\"filename\":\"fan tower_0.2mm_ABS_53m.gcode\",\"state\":\"complete\",\"message\":\"\"},\"toolhead\":{\"square_corner_velocity\":5,\"max_accel\":3000,\"homed_axes\":\"\",\"estimated_print_time\":370618.12118607224,\"max_velocity\":1000,\"print_time\":365901.0764497697,\"max_accel_to_decel\":7500,\"axis_minimum\":[-13,-5,-5,0],\"stalls\":0,\"axis_maximum\":[409,396,400,0],\"position\":[204.5,391,199.94,4041.6051200000047],\"extruder\":\"extruder\"},\"temperature_sensor chamber\":{\"measured_min_temp\":21.62,\"measured_max_temp\":35.57,\"temperature\":21.7},\"heater_bed\":{\"temperature\":26.53,\"power\":0,\"target\":0},\"extruder\":{\"pressure_advance\":0.1,\"target\":0,\"power\":0,\"can_extrude\":false,\"smooth_time\":0.04,\"temperature\":26.06}},\"patchModel\":{\"print_stats\":{\"state\":\"complete\"}},\"prevModel\":{\"virtual_sdcard\":{\"progress\":1,\"file_position\":3511425,\"is_active\":false,\"file_path\":null,\"file_size\":3511425},\"pause_resume\":{\"is_paused\":false},\"display_status\":{\"progress\":1,\"message\":\"Done.\"},\"print_stats\":{\"print_duration\":3348.0411819490837,\"total_duration\":3769.900146160042,\"filament_used\":4041.6051200000047,\"filename\":\"fan tower_0.2mm_ABS_53m.gcode\",\"state\":\"complete\",\"message\":\"\"},\"toolhead\":{\"square_corner_velocity\":5,\"max_accel\":3000,\"homed_axes\":\"\",\"estimated_print_time\":370617.8706009667,\"max_velocity\":1000,\"print_time\":365901.0764497697,\"max_accel_to_decel\":7500,\"axis_minimum\":[-13,-5,-5,0],\"stalls\":0,\"axis_maximum\":[409,396,400,0],\"position\":[204.5,391,199.94,4041.6051200000047],\"extruder\":\"extruder\"},\"temperature_sensor chamber\":{\"measured_min_temp\":21.62,\"measured_max_temp\":35.57,\"temperature\":21.76},\"heater_bed\":{\"temperature\":26.55,\"power\":0,\"target\":0},\"extruder\":{\"pressure_advance\":0.1,\"target\":0,\"power\":0,\"can_extrude\":false,\"smooth_time\":0.04,\"temperature\":26.06}}}",
        "payloadType": "json",
        "x": 730,
        "y": 360,
        "wires": [
            [
                "f2f653c958a21271"
            ]
        ]
    },
    {
        "id": "329f345a7612eeb6",
        "type": "api-call-service",
        "z": "6f1ebe1822580f11",
        "name": "notify my iPhone",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "notify",
        "service": "mobile_app_camilla_13_0",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"title\": \"v-core 3 print job status\",\t   \"message\": \"Print job completed\",\t   \"data\": {\t       \"subtitle\": payload.fullModel.print_stats.filename,\t       \"push\": {\t           \"thread-id\": \"vcore3_job_status\"\t       },\t       \"@todo:image\": \"https://s3.amazonaws.com/\" & \"Bucket\" & \"/\" & \"Key\",\t       \"@todo:entity_id\": camera_entity_id\t    }\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1090,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "dbd2c86c7dc30e49",
        "type": "moonNode-event",
        "z": "6f1ebe1822580f11",
        "name": "progress",
        "interval": "1",
        "delta": "0.01",
        "modelPath": "display_status.progress",
        "outputs": 1,
        "x": 720,
        "y": 260,
        "wires": [
            [
                "4c8e1da18cb3f2e7"
            ]
        ]
    },
    {
        "id": "4c8e1da18cb3f2e7",
        "type": "function",
        "z": "6f1ebe1822580f11",
        "name": "crosses 50%",
        "func": "node.status({text: msg.moonNode.eventValue, shape: \"dot\", fill: \"blue\"});\n\n// pass message if we're crossing the threshold for the first time\nif ((msg.moonNode.eventValue >= 0.5) && (msg.moonNode.lastEventValue < 0.5)) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 260,
        "wires": [
            [
                "81643160bf8fe082",
                "52dac028ace43c45"
            ]
        ]
    },
    {
        "id": "81643160bf8fe082",
        "type": "api-call-service",
        "z": "6f1ebe1822580f11",
        "name": "notify my iPhone",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "notify",
        "service": "mobile_app_camilla_13_0",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"title\": \"v-core 3 print job status\",\t   \"message\": \"Print job at \" & $round(payload.fullModel.display_status.progress * 100) & \"%\",\t   \"data\": {\t       \"subtitle\": payload.fullModel.print_stats.filename,\t       \"push\": {\t           \"thread-id\": \"vcore3_job_status\"\t       },\t       \"@todo:image\": \"https://s3.amazonaws.com/\" & \"Bucket\" & \"/\" & \"Key\",\t       \"entity_id\": \"camera.v_core_3_enclosure\"\t    }\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1090,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "52dac028ace43c45",
        "type": "api-call-service",
        "z": "6f1ebe1822580f11",
        "name": "in-hass notif",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "persistent_notification",
        "service": "create",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"notification_id\": \"vcore3_job_status\"\t       ,\t   \"title\": \"v-core 3 print job status\",\t   \"message\": \"Print job at \" & $round(\t       payload.fullModel.display_status.progress * 100\t   ) & \"%\"\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1070,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "359af246fd0890bb",
        "type": "api-call-service",
        "z": "6f1ebe1822580f11",
        "name": "in-hass notif",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "persistent_notification",
        "service": "create",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"notification_id\": \"vcore3_job_status\",\t   \"title\": \"v-core 3 print job status\",\t   \"message\": \"Print job completed\"\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1070,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ff2c7434b0170cd9",
        "type": "function",
        "z": "6f1ebe1822580f11",
        "name": "heat soak completes",
        "func": "var model = msg.payload.fullModel;\nif (model[\"gcode_macro HEAT_SOAK\"] != undefined) {\n    var stage = model[\"gcode_macro HEAT_SOAK\"].stage;\n    var lastStage = context.get(\"lastStage\");\n\n    if (stage != lastStage) {\n        node.status({text: \"stage \" + stage, shape: \"dot\", fill: \"blue\"});\n        context.set(\"lastStage\", stage);\n        \n        if ((lastStage === \"soaking\") && (stage === \"done\")) {\n            return msg;\n        }\n    }\n} else {\n    node.error(\"no macro data: \" + JSON.stringify(model));\n    node.status({text: \"missing data\", fill: \"red\", shape: \"ring\"});\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "context.set(\"lastStage\", \"-init-\");\n",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 460,
        "wires": [
            [
                "a97d4afabfecc162",
                "214d86b8387542a2"
            ]
        ]
    },
    {
        "id": "a97d4afabfecc162",
        "type": "api-call-service",
        "z": "6f1ebe1822580f11",
        "name": "in-hass notif",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "persistent_notification",
        "service": "create",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"notification_id\": \"vcore3_job_heat_soak\",\t   \"title\": \"v-core 3 heat soak status\",\t   \"message\": \"Heat soak done\"\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1070,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "214d86b8387542a2",
        "type": "api-call-service",
        "z": "6f1ebe1822580f11",
        "name": "notify my iPhone",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "notify",
        "service": "mobile_app_camilla_13_0",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"title\": \"v-core 3 heat soak status\",\t   \"message\": \"Heat soak done\",\t   \"data\": {\t       \"push\": {\t           \"thread-id\": \"vcore3_job_heat_soak\"\t       },\t       \"@todo:image\": \"https://s3.amazonaws.com/\" & \"Bucket\" & \"/\" & \"Key\",\t       \"@todo:entity_id\": camera_entity_id\t    }\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1090,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "30dbf459ba3b257e",
        "type": "ha-button",
        "z": "6f1ebe1822580f11",
        "name": "pre-heat 110° for 45m",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "6a9c966b66b0321c",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 330,
        "y": 620,
        "wires": [
            [
                "a3b20635c837dd8f"
            ]
        ]
    },
    {
        "id": "a3b20635c837dd8f",
        "type": "moonNode-command",
        "z": "6f1ebe1822580f11",
        "name": "pre-heat 110°",
        "command": "HEAT_SOAK TARGET=110 DURATION=45",
        "server": "63a02432e8112030",
        "stateless": true,
        "x": 540,
        "y": 620,
        "wires": [
            [
                "eb5bb334eb696851"
            ],
            [
                "a990203946f947ab"
            ],
            [
                "9ddd67cf0fa4e147"
            ]
        ]
    },
    {
        "id": "a990203946f947ab",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "response data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 809,
        "y": 647,
        "wires": []
    },
    {
        "id": "9ddd67cf0fa4e147",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "eb5bb334eb696851",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "command out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 600,
        "wires": []
    },
    {
        "id": "aa600bf09aa0af4f",
        "type": "moonNode-command",
        "z": "6f1ebe1822580f11",
        "name": "cancel heat soak",
        "command": "CANCEL_HEAT_SOAK",
        "server": "63a02432e8112030",
        "stateless": true,
        "x": 540,
        "y": 800,
        "wires": [
            [
                "297f4e9a7ad9c7b9"
            ],
            [
                "d5aeb3d4aeffbf07"
            ],
            [
                "71d95096827220fb"
            ]
        ]
    },
    {
        "id": "d5aeb3d4aeffbf07",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "response data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 799,
        "y": 827,
        "wires": []
    },
    {
        "id": "71d95096827220fb",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 900,
        "wires": []
    },
    {
        "id": "297f4e9a7ad9c7b9",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "command out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 780,
        "wires": []
    },
    {
        "id": "16f9acd8821e3dcd",
        "type": "ha-button",
        "z": "6f1ebe1822580f11",
        "name": "cancel heat soak",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "1279c405858f966e",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 320,
        "y": 800,
        "wires": [
            [
                "aa600bf09aa0af4f"
            ]
        ]
    },
    {
        "id": "a6ecf7d4b94a946f",
        "type": "link out",
        "z": "6f1ebe1822580f11",
        "name": "to watchdog",
        "mode": "link",
        "links": [
            "a3d4d61a0931b94a"
        ],
        "x": 495,
        "y": 240,
        "wires": []
    },
    {
        "id": "0df8060213a0bd20",
        "type": "link in",
        "z": "6f1ebe1822580f11",
        "name": "from watchdog",
        "links": [
            "555944a008121006"
        ],
        "x": 315,
        "y": 340,
        "wires": [
            [
                "92177d0f19a1753c"
            ]
        ]
    },
    {
        "id": "d84a55a982929273",
        "type": "catch",
        "z": "6f1ebe1822580f11",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 320,
        "y": 60,
        "wires": [
            [
                "691868c3c06ae3a6"
            ]
        ]
    },
    {
        "id": "691868c3c06ae3a6",
        "type": "debug",
        "z": "6f1ebe1822580f11",
        "name": "vcore3 exceptions",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 60,
        "wires": []
    },
    {
        "id": "d197fe175399dd70",
        "type": "api-call-service",
        "z": "6f1ebe1822580f11",
        "name": "logbook",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "logbook",
        "service": "log",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{ \"name\":\"v-core 3 preheat\", \"message\":\"complete\", \"domain\":\"automation\"\t}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1240,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "b7a34de0fc240b07",
        "type": "subflow:8ee3d653bff5e3e5",
        "z": "6262a64468718f73",
        "name": "",
        "env": [
            {
                "name": "notif_id",
                "value": "qwerty",
                "type": "str"
            },
            {
                "name": "notif_title",
                "value": "a title",
                "type": "str"
            },
            {
                "name": "notif_message",
                "value": "a message",
                "type": "str"
            },
            {
                "name": "camera_id",
                "value": "some_camera",
                "type": "str"
            },
            {
                "name": "moon_fullModel",
                "value": "{\"help\":\"me\"}",
                "type": "json"
            }
        ],
        "x": 510,
        "y": 160,
        "wires": []
    },
    {
        "id": "287e5ff455a547f8",
        "type": "inject",
        "z": "6262a64468718f73",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 120,
        "wires": [
            [
                "b7a34de0fc240b07"
            ]
        ]
    },
    {
        "id": "072a1df189194b48",
        "type": "debug",
        "z": "6262a64468718f73",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 460,
        "wires": []
    },
    {
        "id": "618858bbd69aa4a5",
        "type": "server-state-changed",
        "z": "6262a64468718f73",
        "name": "",
        "server": "1fb2958d.14f89a",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "sensor.zoot_battery_level",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "num",
        "haltifstate": "15",
        "halt_if_type": "num",
        "halt_if_compare": "lt",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": "30",
        "forType": "num",
        "forUnits": "seconds",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 300,
        "y": 440,
        "wires": [
            [
                "fbd1ca67e77be301"
            ],
            [
                "66e8487fca2a5767"
            ]
        ]
    },
    {
        "id": "fbd1ca67e77be301",
        "type": "debug",
        "z": "6262a64468718f73",
        "name": "is true",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 420,
        "wires": []
    },
    {
        "id": "66e8487fca2a5767",
        "type": "debug",
        "z": "6262a64468718f73",
        "name": "is false",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 480,
        "wires": []
    },
    {
        "id": "f4584b61fa26e6ac",
        "type": "influxdb out",
        "z": "429b7a553657396c",
        "influxdb": "c9d6062829ddc012",
        "name": "node-red-monitoring",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "org0",
        "bucket": "node-red-monitoring",
        "x": 740,
        "y": 160,
        "wires": []
    },
    {
        "id": "993916ec05f984f8",
        "type": "inject",
        "z": "429b7a553657396c",
        "name": "10s ticker",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "b6f5d1f660c16e39",
                "6e938e72e0a69c99",
                "a71d70171ca1353e",
                "becffabb4dba66e2"
            ]
        ]
    },
    {
        "id": "b6f5d1f660c16e39",
        "type": "function",
        "z": "429b7a553657396c",
        "name": "memoryUsage",
        "func": "\nreturn {\n    measurement: \"process-memoryUsage\",\n    payload: [\n        // named fields\n        process.memoryUsage(),\n        \n        // named tags\n        {},\n    ],\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 460,
        "y": 200,
        "wires": [
            [
                "f4584b61fa26e6ac"
            ]
        ]
    },
    {
        "id": "6e938e72e0a69c99",
        "type": "function",
        "z": "429b7a553657396c",
        "name": "heapStatistics",
        "func": "\nreturn {\n    measurement: \"v8-heapStatistics\",\n    payload: [\n        // named fields\n        v8.getHeapStatistics(),\n        \n        // named tags\n        {},\n    ],\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "v8",
                "module": "v8"
            }
        ],
        "x": 460,
        "y": 260,
        "wires": [
            [
                "f4584b61fa26e6ac"
            ]
        ]
    },
    {
        "id": "a71d70171ca1353e",
        "type": "function",
        "z": "429b7a553657396c",
        "name": "cpuUsage",
        "func": "\nreturn {\n    measurement: \"process-cpuUsage\",\n    payload: [\n        // named fields\n        process.cpuUsage(),\n        \n        // named tags\n        {},\n    ],\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "f4584b61fa26e6ac"
            ]
        ]
    },
    {
        "id": "becffabb4dba66e2",
        "type": "function",
        "z": "429b7a553657396c",
        "name": "resourceUsage",
        "func": "\nreturn {\n    measurement: \"process-resourceUsage\",\n    payload: [\n        // named fields\n        process.resourceUsage(),\n        \n        // named tags\n        {},\n    ],\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 460,
        "y": 80,
        "wires": [
            [
                "f4584b61fa26e6ac"
            ]
        ]
    },
    {
        "id": "489e8cdcc3c9e473",
        "type": "trigger",
        "z": "429b7a553657396c",
        "name": "watchdog",
        "op1": "",
        "op2": "{\"log\":{\"name\":\"v-core 3 watchdog\",\"message\":\"timer expired\"}}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 280,
        "y": 440,
        "wires": [
            [
                "6b89da7ceec5a056",
                "29e6bb150e7f1117",
                "fdbdcc7d98191247",
                "58fe93e65143252e"
            ]
        ]
    },
    {
        "id": "6b89da7ceec5a056",
        "type": "api-call-service",
        "z": "429b7a553657396c",
        "d": true,
        "name": "in-hass notif",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "persistent_notification",
        "service": "create",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\t   \"notification_id\": \"vcore3_monitor_status\"\t       ,\t   \"title\": \"v-core 3 monitor watchdog timeout\",\t   \"message\": \"some new shit has come to light, man.\"\t}\t",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 510,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "9dc0cb39dce3b8fb",
        "type": "inject",
        "z": "429b7a553657396c",
        "name": "restart monitoring",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 500,
        "wires": [
            [
                "29e6bb150e7f1117"
            ]
        ]
    },
    {
        "id": "29e6bb150e7f1117",
        "type": "trigger",
        "z": "429b7a553657396c",
        "name": "toggle connection",
        "op1": "{\"monitorState\":\"OFF\"}",
        "op2": "{\"monitorState\":\"ON\"}",
        "op1type": "json",
        "op2type": "json",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 530,
        "y": 500,
        "wires": [
            [
                "555944a008121006"
            ]
        ]
    },
    {
        "id": "a3d4d61a0931b94a",
        "type": "link in",
        "z": "429b7a553657396c",
        "name": "from moonnode",
        "links": [
            "a6ecf7d4b94a946f"
        ],
        "x": 145,
        "y": 440,
        "wires": [
            [
                "489e8cdcc3c9e473"
            ]
        ]
    },
    {
        "id": "555944a008121006",
        "type": "link out",
        "z": "429b7a553657396c",
        "name": "to moonnode",
        "mode": "link",
        "links": [
            "0df8060213a0bd20"
        ],
        "x": 675,
        "y": 500,
        "wires": []
    },
    {
        "id": "8cd3e3cecd18c58a",
        "type": "server-events",
        "z": "429b7a553657396c",
        "name": "",
        "server": "1fb2958d.14f89a",
        "version": 1,
        "event_type": "sun.sun",
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "waitForRunning": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            }
        ],
        "x": 220,
        "y": 620,
        "wires": [
            [
                "79a0d955c231e255"
            ]
        ]
    },
    {
        "id": "79a0d955c231e255",
        "type": "trigger",
        "z": "429b7a553657396c",
        "name": "watchdog",
        "op1": "",
        "op2": "arg wtf ha gone?",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 620,
        "wires": [
            [
                "835e59bad46be84a"
            ]
        ]
    },
    {
        "id": "835e59bad46be84a",
        "type": "debug",
        "z": "429b7a553657396c",
        "name": "ha watchdog",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 620,
        "wires": []
    },
    {
        "id": "ed0cc73aa710ad70",
        "type": "comment",
        "z": "429b7a553657396c",
        "name": "runtime metrics to influxdb",
        "info": "",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "363520907ca1858d",
        "type": "comment",
        "z": "429b7a553657396c",
        "name": "restart v-core 3 moonraker monitor",
        "info": "on timeout",
        "x": 240,
        "y": 340,
        "wires": []
    },
    {
        "id": "e8e1470616494223",
        "type": "comment",
        "z": "429b7a553657396c",
        "name": "ha watchdog (ish)",
        "info": "not sure how to restart HA connection…",
        "x": 180,
        "y": 580,
        "wires": []
    },
    {
        "id": "fdbdcc7d98191247",
        "type": "debug",
        "z": "429b7a553657396c",
        "name": "vcore3 watchdog",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "d7c0191d41ee0bc0",
        "type": "catch",
        "z": "429b7a553657396c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 720,
        "wires": [
            [
                "495c324615c6b0c4"
            ]
        ]
    },
    {
        "id": "495c324615c6b0c4",
        "type": "debug",
        "z": "429b7a553657396c",
        "name": "monitoring exceptions",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 720,
        "wires": []
    },
    {
        "id": "58fe93e65143252e",
        "type": "api-call-service",
        "z": "429b7a553657396c",
        "name": "logbook",
        "server": "1fb2958d.14f89a",
        "version": 5,
        "debugenabled": false,
        "domain": "logbook",
        "service": "log",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{ \"name\":log.name, \"message\":log.message, \"domain\":\"automation\"\t}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 500,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "279a0cb88e1322da",
        "type": "unifi-request",
        "z": "b34df73523bd7dfb",
        "d": true,
        "name": "bootstrap GET",
        "accessControllerNodeId": "bdab178cf02ef0af",
        "endpoint": "/proxy/protect/api/bootstrap",
        "method": "GET",
        "data": "",
        "dataType": "json",
        "responseType": "json",
        "x": 240,
        "y": 180,
        "wires": [
            [
                "aee393f44bb9a5f6",
                "0d0118f922dd2c31",
                "522fc78902c0514a"
            ]
        ]
    },
    {
        "id": "ed32437cb3525587",
        "type": "unifi-web-socket",
        "z": "b34df73523bd7dfb",
        "d": true,
        "name": "protect updates",
        "endpoint": "",
        "accessControllerNodeId": "bdab178cf02ef0af",
        "reconnectTimeout": 30000,
        "x": 460,
        "y": 120,
        "wires": [
            [
                "50ab8965e0c4f219",
                "522fc78902c0514a"
            ],
            [
                "0b4cbc6e6543bf75",
                "522fc78902c0514a"
            ]
        ]
    },
    {
        "id": "afb5622f658f7603",
        "type": "inject",
        "z": "b34df73523bd7dfb",
        "name": "connect",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "279a0cb88e1322da"
            ]
        ]
    },
    {
        "id": "aee393f44bb9a5f6",
        "type": "debug",
        "z": "b34df73523bd7dfb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 220,
        "wires": []
    },
    {
        "id": "0d0118f922dd2c31",
        "type": "function",
        "z": "b34df73523bd7dfb",
        "name": "lastUpdateId",
        "func": "if (\"lastUpdateId\" in msg.payload) {\n    return {\n        payload: {\n            endpoint: `/proxy/protect/ws/updates?lastUpdateId=${msg.payload.lastUpdateId}`\n        }\n    };\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 60,
        "wires": [
            [
                "ed32437cb3525587"
            ]
        ]
    },
    {
        "id": "50ab8965e0c4f219",
        "type": "debug",
        "z": "b34df73523bd7dfb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 60,
        "wires": []
    },
    {
        "id": "0b4cbc6e6543bf75",
        "type": "debug",
        "z": "b34df73523bd7dfb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 180,
        "wires": []
    },
    {
        "id": "522fc78902c0514a",
        "type": "file",
        "z": "b34df73523bd7dfb",
        "name": "",
        "filename": "/alloc/logs/protect-ws2.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 860,
        "y": 140,
        "wires": [
            []
        ]
    }
]